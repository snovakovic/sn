{"version":3,"sources":["sn.js","sn.end.js","sn.array.js","sn.assert.js","sn.date.js","sn.function.js","sn.object.js","sn.string.js"],"names":["global","factory","exports","module","define","amd","sn","this","executionContext","__EC__","assertIsArray","arr","assert","is","array","each","callback","i","l","length","call","iterate","remove","elToRemove","max","pos","indexOf","lastIndexOf","splice","shuffle","temporaryValue","randomIndex","currentIndex","Math","floor","random","getFilledArray","val","len","rv","Array","unique","originalArr","push","first","condition","last","stack","defaultArray","_stack","add","isArray","prototype","apply","pop","peek","queue","_queue","addRange","range","shift","internals","isString","testVar","isNumber","isDate","Object","toString","assertMessage","TypeError","t2","t1","empty","test","key","hasOwnProperty","string","number","boolean","null","undefined","defined","object","function","date","not","prop","getDate","Date","setLastDayOfMonth","dt","setMonth","getMonth","lastDayOfMonth","getTime","setDate","getLastDayOfMonth","getFullYear","addMilliseconds","milliseconds","setMilliseconds","getMilliseconds","addSeconds","seconds","setSeconds","getSeconds","addMinutes","minutes","setMinutes","getMinutes","addHours","hours","setHours","getHours","addDays","days","addMonths","months","addYears","years","setFullYear","getMonths","index","month","name","shortName","once","fn","result","arguments","debounce","wait","timeout","callNow","clearTimeout","setTimeout","execute","executeFn","executer","conditionFn","maxTicks","tick","isNaN","bind","when","conditionFb","_tick","_maxTicks","subscribers","broadcast","to","callArguments","slice","listen","subscribe","cb","deepSealOrFreez","obj","action","getOwnPropertyNames","forEach","isSealed","deepFreez","freez","deepSeal","seal","extend","replaceAll","whatToReplace","with","replaceWith","replace","RegExp","capitalize","str","toUpperCase","contains","str1","str2","ignoreCase","toLowerCase","chop","step","String","match","clean","trim","truncate","truncateStr","between","startStr","endStr","startIndex","endIndex","substr"],"mappings":"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","file":"sn.min.js","sourcesContent":["/*****************************************************\n\t  s.js https://github.com/snovakovic/s.js\n    author: stefan.novakovich@gmail.com\n    version: 0.0.1\n ***************************************************/\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n      (global.sn = factory());\n} (this, (function () {\n\n  'use strict';\n\n  var __EC__; //execution context\n\n  function sn(executionContext) {\n    __EC__ = executionContext;\n    return sn;\n  }\n\n  //app files will be concatenated here and then this will be closed with sn.end.js\n\n","  return sn;\r\n})));\r\n","(function (sn) {\n\n  //PRIVATE\n  var assertIsArray = function (arr) {\n    sn(arr || __EC__).assert.is.array();\n  };\n\n  //PUBLIC\n\n  /**********************************************\n  * Loop over array. this in callback function will ber set to array.\n  * @param arr {Array} array we want to iterate\n  * @param callback {Function} callback function that will be called on each iteration\n  ************************************************/\n  sn.each = function (callback) {\n    assertIsArray();\n\n    for (var i = 0, l = __EC__.length; i < l; i++) {\n      if (callback.call(__EC__, __EC__[i], i) === false) {\n        break;\n      }\n    }\n    return sn;\n  };\n\n  /**********************************************\n  * Iterate specific number of times.\n  * @param l {Number} number of times we want to iterate\n  * @param callback {Function} callback function that will be called on each iteration\n  ************************************************/\n  sn.iterate = function (l, callback) {\n    for (var i = 0; i < l; i++) {\n      if (callback.call(null, i) === false) {\n        break;\n      }\n    }\n  };\n\n  /***********************************************\n  * Remove all occurrences of element from array\n  * @param arr {Array} array from where we want  to remove values\n  * @param elToRemove {...} element that we want to remove from array\n  * @param max {whole number integer} max number of occurrences to remove. 1 - remove first, -1 remove last.\n  * @return {Array} new array without removed values\n  ***********************************************/\n  sn.remove = function (elToRemove, max) {\n    var pos;\n\n    assertIsArray();\n\n    while (pos !== -1 && max !== 0) {\n      if (max) {\n        if (max >= 1) {\n          pos = __EC__.indexOf(elToRemove);\n          max--;\n        } else {\n          pos = __EC__.lastIndexOf(elToRemove);\n          max++;\n        }\n\n      } else {\n        pos = __EC__.indexOf(elToRemove);\n      }\n\n      pos > -1 && __EC__.splice(pos, 1);\n    }\n\n    return __EC__;\n  };\n\n  /*******************************************************\n  * Shuffle values in the array\n  * https://github.com/Daplie/knuth-shuffle\n  * @param arr {Array} input array that we want to shuffle\n  * @return {Array} shuffled array\n  ********************************************************/\n  sn.shuffle = function () {\n    var currentIndex = __EC__.length;\n    var temporaryValue;\n    var randomIndex;\n\n    assertIsArray();\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = __EC__[currentIndex];\n      __EC__[currentIndex] = __EC__[randomIndex];\n      __EC__[randomIndex] = temporaryValue;\n    }\n\n    return __EC__;\n  };\n\n  /*********************************************\n  * Get the new array filled with default values\n  * @param val {Any} default array value\n  * @return len {Integer} size of the new array\n  **********************************************/\n  sn.getFilledArray = function (val, len) {\n    var rv = new Array(len);\n    while (--len >= 0) {\n      rv[len] = val;\n    }\n    return rv;\n  };\n\n  /*************************************************\n  * Returns new array containing only unique values from original array\n  * Doesn't support nested objects and array\n  * @param originalArr {Array} array form where we want to remove duplicate values\n  * @return array without duplicate values\n  ***********************************************/\n  sn.unique = function (originalArr) {\n    var arr = [];\n\n    assertIsArray();\n\n    for (var i = 0; i < originalArr.length; i++) {\n      if (arr.indexOf(originalArr[i]) === -1) {\n        arr.push(originalArr[i]);\n      }\n    }\n    return arr;\n  };\n\n  /********************************************s\n  * Returns first element of array if no condition is passed,\n  * else if there is condition returns first element of array that meets condition\n  * @param arr {Array} array we want to search in for value\n  * @param condition {Function} function that returns true if value is found.\n  * @return array item if found or undefined if not found\n  **********************************************/\n  sn.first = function (arr, condition) {\n    assertIsArray();\n\n    if (arr && arr.length) {\n      if (condition) {\n        for (var i = 0; i < arr.length; i++) {\n          if (condition(arr[i])) {\n            return arr[i];\n          }\n        }\n      } else {\n        return arr[0];\n      }\n    }\n\n    return undefined;\n\n  };\n\n  /**********************************************************\n  * Returns last element of array if no condition is passed,\n  * else if there is condition returns last element of array that meets condition\n  * @param arr {Array} [optional] array we want to search in for value\n  * @param condition {Function} function that returns true if value is found.\n  * @return array item if found or undefined if not found\n  ***********************************************************/\n  sn.last = function (arr, condition) {\n    assertIsArray();\n\n    if (arr && arr.length) {\n      if (condition) {\n        for (var i = arr.length - 1; i >= 0; i--) {\n          if (condition(arr[i])) {\n            return arr[i];\n          }\n        }\n      } else {\n        return arr[arr.length - 1];\n      }\n    }\n\n    return undefined;\n\n  };\n\n  /*********************************************\n   * Stack implementation LIFO last in first out\n   * @param defaultArray [optional] {Array} default array that will be used as a stack base\n  *********************************************/\n  sn.stack = function (defaultArray) {\n    if (defaultArray) {\n      assertIsArray();\n    }\n\n    return (function () {\n      var _stack = defaultArray || [];\n      return {\n        add: function (val) {\n          Array.isArray(val) ? Array.prototype.push.apply(_stack, val) : _stack.push(val);\n        },\n        remove: function () {\n          return _stack.length ? _stack.pop() : null;\n        },\n        peek: function () {\n          return _stack.length ? _stack[_stack.length - 1] : null;\n        },\n        get array() {\n          return _stack;\n        },\n        get length() {\n          return _stack.length;\n        }\n      };\n    })();\n  };\n\n  /*********************************************\n  * Queue implementation FIFI: first in first out\n   * @param defaultArray [optional] {Array} default array that will be used as a queue base\n  *********************************************/\n  sn.queue = function (defaultArray) {\n    if (defaultArray) {\n      assertIsArray();\n    }\n\n    return (function () {\n      var _queue = defaultArray || [];\n      return {\n        add: function (val) {\n          Array.isArray(val) ? Array.prototype.push.apply(_queue, val) : _queue.push(val);\n        },\n        addRange: function (range) {\n          Array.prototype.push.apply(_queue, range);\n        },\n        remove: function () {\n          return _queue.length ? _queue.shift() : null;\n        },\n        peek: function () {\n          return _queue.length ? _queue[0] : null;\n        },\n        get array() {\n          return _queue;\n        },\n        get length() {\n          return _queue.length;\n        }\n      };\n    })();\n  };\n\n})(sn);\n","(function (sn) {\n\n  var internals = {\n    isString: function (testVar) {\n      return typeof testVar === 'string';\n    },\n    isNumber: function (testVar) {\n      //NaN will produce false because NaN !== NaN\n      return typeof testVar === 'number' && testVar === testVar;\n    },\n    isDate: function (testVar) {\n      return Object.prototype.toString.call(testVar) === '[object Date]';\n    },\n    assert: function (val, assertMessage) {\n      if (val) {\n        return val;\n      }\n      throw new TypeError(assertMessage);\n    }\n\n  };\n\n\n  //PUBLIC\n\n  /****************************************\n  * Safely check if two variables are the same without JS coercion gotchas\n  * == is used when comparing string and numbers (with exception for emptySting == 0 which is false as it should be)\n  * == is used for compering null and undefined\n  * for everything else === is used.\n  * ********************************* */\n  sn.is = function (t2) {\n    var t1 = __EC__;\n    if ((internals.isString(t1) || internals.isNumber(t1)) && (internals.isString(t2) || internals.isNumber(t2))) {\n      //this covers coercion between string and number without any gotchas\n      return (typeof t1 === typeof t2)\n        ? t1 === t2\n        : t1 == t2 && t1 !== '' && t2 !== '';\n\n    } else if (t1 == null && t2 == null) {\n      //This covers when vars are either null or undefined without any gotchas\n      return true;\n    }\n\n    return t1 === t2;\n\n  };\n\n\n  /****************************************************\n   * Test if variable has been defined and is not empty,\n   * Following will be treated as false\n   * sn(null).is.empty(); => true\n   * sn(undefined).is.empty(); => true\n   * sn({}).is.empty(); => true\n   * sn([]).is.empty(); => true\n   * sn(' ').is.empty(); => true\n   * sn('\\n\\t').is.empty(); => true\n  ********************************************************/\n  sn.is.empty = function () {\n    if (__EC__ == null\n      || (typeof __EC__ === 'string' && (/^\\s*$/).test(__EC__))) {\n      return true;\n    }\n\n    if (typeof __EC__ === 'object') {\n      for (var key in __EC__) {\n        if (__EC__.hasOwnProperty(key)) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    return false;\n  };\n\n\n  /***************************************\n   * START: data type checks\n   **************************************/\n  sn.is.string = function () {\n    return internals.isString(__EC__);\n  };\n\n  sn.is.number = function () {\n    return internals.isNumber(__EC__);\n  };\n\n  sn.is.boolean = function () {\n    return typeof __EC__ === 'boolean';\n  };\n\n  sn.is.null = function () {\n    return __EC__ === null;\n  };\n\n  sn.is.undefined = function () {\n    typeof __EC__ === 'undefined';\n  };\n\n  //not null and undefined\n  sn.is.defined = function () {\n    return __EC__ != null;\n  };\n\n  sn.is.object = function () {\n    return typeof __EC__ === 'object'\n      && __EC__ !== null\n      && !Array.isArray(__EC__);\n  };\n\n  sn.is.function = function () {\n    return typeof __EC__ === 'function';\n  };\n\n  sn.is.array = function () {\n    return typeof __EC__ === 'object' && Array.isArray(__EC__);\n  };\n\n  sn.is.date = function () {\n    return internals.isDate(__EC__);\n  };\n\n  /***************************************\n  * END: data type checks\n  **************************************/\n\n\n  /*************************************\n  * START: ASSERT && NOT MODULE DEFINITION\n  **************************************/\n  sn.not = function (val) {\n    return !sn.is(val);\n  };\n\n  sn.assert = {\n    is: function (val) {\n      return internals.assert(sn.is(val), 'Values are not the same.');\n    },\n    not: function (val) {\n      return internals.assert(!sn.is(val), 'Values are the same.');\n    }\n  };\n\n  for (var prop in sn.is) {\n    if (sn.is.hasOwnProperty(prop)) {\n      (function (prop) {\n        sn.not[prop] = function () {\n          return !sn.is[prop]();\n        };\n        sn.assert.is[prop] = function () {\n          return internals.assert(sn.is[prop](), 'Provided value is not ' + prop + '.');\n        };\n        sn.assert.not[prop] = function () {\n          return internals.assert(!sn.is[prop](), 'Provided value is ' + prop + '.');\n        };\n      })(prop);\n    }\n  }\n\n  /*************************************\n  * END: ASSERT MODULE DEFINITION\n  **************************************/\n\n\n})(sn);\n","(function (sn) {\n\n  //PRIVATE\n  var getDate = function () {\n    if (__EC__) {\n      sn.assert.is.date(__EC__);\n      return __EC__;\n    }\n    return new Date();\n  };\n\n\n\n  //PUBLIC\n\n  /**********************************************\n  * Change provided date so that it point to last day of current month\n  ************************************************/\n  sn.setLastDayOfMonth = function () {\n    var dt = getDate();\n    dt.setMonth(dt.getMonth() + 1, 0);\n    return dt;\n  };\n\n\n  /**********************************************\n  * Check if day in date is last day of month\n  * @return true -> day is last day of month; false - day is not last day of month\n  ************************************************/\n  sn.is.lastDayOfMonth = function () {\n    var dt = getDate();\n    var test = new Date(dt.getTime());\n    test.setDate(test.getDate() + 1);\n    return test.getDate() === 1;\n  };\n\n\n  /**********************************************\n  * Check if day in date is last day of month\n  * @return true -> day is last day of month; false - day is not last day of month\n  ************************************************/\n  sn.getLastDayOfMonth = function () {\n    var dt = getDate();\n    return (new Date(dt.getFullYear(), dt.getMonth() + 1, 0)).getDate();\n  };\n\n\n  /**********************************************\n  * Add or remove dates from provided date\n  * @param milliseconds {Number} +/- milliseconds to add or remove from date\n  ************************************************/\n  sn.addMilliseconds = function (milliseconds) {\n    var dt = getDate();\n    dt.setMilliseconds(dt.getMilliseconds() + milliseconds);\n    return dt;\n  };\n\n  /**********************************************\n  * Add or remove dates from provided date\n  * @param seconds {Number} +/- seconds to add or remove from date\n  ************************************************/\n  sn.addSeconds = function (seconds) {\n    var dt = getDate();\n    dt.setSeconds(dt.getSeconds() + seconds);\n    return dt;\n  };\n\n  /**********************************************\n  * Add or remove dates from provided date\n  * @param minutes {Number} +/- minutes to add or remove from date\n  ************************************************/\n  sn.addMinutes = function (minutes) {\n    var dt = getDate();\n    dt.setMinutes(dt.getMinutes() + minutes);\n    return dt;\n  };\n\n  /**********************************************\n  * Add or remove dates from provided date\n  * @param hours {Number} +/- hours to add or remove from date\n  ************************************************/\n  sn.addHours = function (hours) {\n    var dt = getDate();\n    dt.setHours(dt.getHours() + hours);\n    return dt;\n  };\n\n  /**********************************************\n  * Add or remove dates from provided date\n  * @param days {Number} +/- days to add or remove from date\n  ************************************************/\n  sn.addDays = function (days) {\n    var dt = getDate();\n    dt.setDate(dt.getDate() + days);\n    return dt;\n  };\n\n  /**********************************************\n  * Add or remove dates from provided date\n  * @param months {Number} +/- months to add or remove from date\n  ************************************************/\n  sn.addMonths = function (months) {\n    var dt = getDate();\n    dt.setMonth(dt.getMonth() + months);\n    return dt;\n  };\n\n  /**********************************************\n  * Add or remove dates from provided date\n  * @param years {Number} +/- years to add or remove from date\n  ************************************************/\n  sn.addYears = function (years) {\n    var dt = getDate();\n    dt.setFullYear(dt.getFullYear() + years);\n    return dt;\n  };\n\n  /**********************************************\n  * Get the list of english months with fullName, shortName and month index\n  ************************************************/\n  sn.getMonths = function () {\n    return [\n      {\n        index: 0,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'January',\n        shortName: 'Jan',\n        days: 31\n      }, {\n        index: 1,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'February',\n        shortName: 'Feb',\n        days: [28, 29]\n      }, {\n        index: 2,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'March',\n        shortName: 'Mar',\n        days: 31\n      }, {\n        index: 3,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'April',\n        shortName: 'Apr',\n        days: 30\n      }, {\n        index: 4,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'May',\n        shortName: 'May',\n        days: 31\n      }, {\n        index: 5,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'June',\n        shortName: 'Jun',\n        days: 30\n      }, {\n        index: 6,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'July',\n        shortName: 'Jul',\n        days: 31\n      }, {\n        index: 7,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'August',\n        shortName: 'Aug',\n        days: 31\n      }, {\n        index: 8,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'September',\n        shortName: 'Sep',\n        days: 30\n      }, {\n        index: 9,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'October',\n        shortName: 'Oct',\n        days: 31\n      }, {\n        index: 10,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'November',\n        shortName: 'Nov',\n        days: 30\n      }, {\n        index: 11,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'December',\n        shortName: 'Dec',\n        days: 31\n      }\n    ];\n  };\n\n})(sn);\n","/**********************************************\r\n* returns function that can be executed only once\r\n* Result of function execution is cached and can be accesed latter by calling that function\r\n************************************************/\r\nsn.once = function(fn) {\r\n  var result;\r\n  return function() {\r\n    if (fn) {\r\n      result = fn.apply(this, arguments);\r\n      fn = null;\r\n    }\r\n    return result;\r\n  };\r\n};\r\n\r\n/**********************************************\r\n* Returns a function, that, as long as it continues to be invoked, will not be triggered\r\n* Default wait time for debounce is 200ms.\r\n ************************************************/\r\nsn.debounce = function(fn, wait) {\r\n  var timeout;\r\n  return function() {\r\n    var callNow = !timeout;\r\n\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(function() {\r\n      timeout = null;\r\n    }, wait);\r\n\r\n    if (callNow) { fn.apply(this, arguments); }\r\n  };\r\n};\r\n\r\n/*************************\r\n* execute function when condition becomes true\r\n************************/\r\nsn.execute = function(executeFn) {\r\n  return (function() {\r\n    var tick;\r\n    var maxTicks;\r\n\r\n    function executer(conditionFn) {\r\n      if (maxTicks < -tick) {\r\n        return;\r\n      } else if (!isNaN(maxTicks)) {\r\n        maxTicks -= tick;\r\n      }\r\n\r\n      conditionFn() ? executeFn() : setTimeout(executer.bind(null, conditionFn), tick);\r\n    }\r\n\r\n    return {\r\n      when: function(conditionFb, _tick, _maxTicks) {\r\n        tick = _tick || 5;\r\n        maxTicks = _maxTicks;\r\n        executer(conditionFb);\r\n      }\r\n\r\n    };\r\n  })();\r\n};\r\n\r\n/*****************************\r\n * sMsg - broadcast messages\r\n ****************************/\r\n(function(sn) {\r\n  var subscribers = {};\r\n\r\n  sn.broadcast = function(to) {\r\n    var callArguments = Array.prototype.slice.call(arguments, 1, arguments.length);\r\n    for (var i = 0; i < subscribers[to].length; i++) {\r\n      subscribers[to][i].apply(this, callArguments);\r\n    }\r\n  };\r\n\r\n  sn.listen = function(subscribe, cb) {\r\n    subscribers[subscribe] = subscribers[subscribe] || [];\r\n    subscribers[subscribe].push(cb);\r\n  };\r\n\r\n})(sn);\r\n","//DeepFreez / DeepSeal\n(function (sn) {\n\n  /**********************************************\n  * Apply Object.freez on object and each children object as deep as it goes.\n  * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n  ************************************************/\n  sn.deepFreez = function deepFreez(obj) {\n    return deepSealOrFreez(obj, Object.freez);\n  };\n\n  /**********************************************\n  * Apply Object.seal on object and each children object as deep as it goes.\n  * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\n  ************************************************/\n  sn.deepSeal = function deepSeal(obj) {\n    return deepSealOrFreez(obj, Object.seal);\n  };\n\n  function deepSealOrFreez(obj, action) {\n    action(obj);\n\n    Object.getOwnPropertyNames(obj).forEach(function (key) {\n      if (obj.hasOwnProperty(key)\n        && obj[key] !== null\n        && (typeof obj[key] === 'object' || typeof obj[key] === 'function')\n        && !Object.isSealed(obj[key]))\n      {\n        deepSealOrFreez(obj[key]);\n      }\n    });\n\n    return obj;\n  }\n\n})(sn);\n\n\n\n/**********************************************\n* Extend object with the properties from other provided objects.\n* In case of same propertie names value from first object will be overriden with the value from second object\n************************************************/\nsn.extend = function() {\n  for(var i=1; i < arguments.length; i++) {\n    Object.getOwnPropertyNames(arguments[i]).forEach(function (key) {\n      if(arguments[i].hasOwnProperty(key)) {\n        arguments[0][key] = arguments[i][key]\n      }\n    });\n  }\n  return arguments[0];\n};\n","sn.replaceAll = function (whatToReplace) {\r\n  return {\r\n    with: function (replaceWith) {\r\n      return typeof __EC__ === 'string'\r\n        ? __EC__.replace(new RegExp(whatToReplace.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replaceWith)\r\n        : __EC__;\r\n    }\r\n  };\r\n};\r\n\r\nsn.capitalize = function (str) {\r\n  return typeof str === 'string' ? str[(0)].toUpperCase() + str.slice(1) : str;\r\n};\r\n\r\n/***********************************************\r\n * Below methods has been taken from\r\n * https://github.com/epeli/underscore.string\r\n************************************************/\r\n\r\n/*\r\n * test if string contains substring\r\n * @ignore case - case is ignored on comparation\r\n * @example capitalize('foo Bar', 'oo'); => 'Foo Bar'; capitalize('FOO Bar', true); => 'Foo bar'\r\n * https://github.com/epeli/underscore.string\r\n*/\r\nsn.contains = function (str1, str2, ignoreCase) {\r\n  if (ignoreCase === true) {\r\n    str1 = str1.toLowerCase();\r\n    str2 = str2.toLowerCase();\r\n  }\r\n  return str1.indexOf(str2) !== -1;\r\n};\r\n\r\n/*\r\n * Break string in array of substring\r\n * @example: chop(\"whitespace\", 3); => ['whi', 'tes', 'pac', 'e']\r\n*/\r\nsn.chop = function (str, step) {\r\n  if (!str) { return []; }\r\n  str = String(str);\r\n  step = ~~step;\r\n  return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];\r\n};\r\n\r\n/*\r\n* Trim and replace multiple spaces with a single space.\r\n* @example clean(' foo    bar   '); => 'foo bar'\r\n*/\r\nsn.clean = function (str) {\r\n  return str.trim().replace(/\\s\\s+/g, ' ');\r\n};\r\n\r\n\r\n/**\r\n* Truncate string if it exceed max number of characters,\r\n* apply provided truncate string at the end of truncated string (default: '...')\r\n*/\r\nsn.truncate = function (str, length, truncateStr) {\r\n  truncateStr = truncateStr || '...';\r\n  length = ~~length;\r\n  return str.length > length ? str.slice(0, length) + truncateStr : str;\r\n};\r\n\r\n/**********************************************\r\n* Get the substring of the string between 2 substrings,\r\nTODO: not documented or tested\r\n***************************************************/\r\nsn.between = function (startStr, endStr) {\r\n  var startIndex = __EC__.indexOf(startStr);\r\n  var endIndex = __EC__.indexOf(endStr);\r\n\r\n  if (startIndex === -1 || startIndex === -1) {\r\n    return undefined;\r\n  }\r\n\r\n  startIndex += startStr.length;\r\n  return __EC__.substr(startIndex, endIndex - startIndex);\r\n};\r\n"]}