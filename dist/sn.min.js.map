{"version":3,"sources":["sn.js","sn.end.js","sn.array.js","sn.assert.js","sn.date.js","sn.function.js","sn.object.js","sn.string.js"],"names":["global","factory","exports","module","define","amd","sn","this","executionContext","__EC__","each","callback","length","i","call","iterate","iterations","Number","is","number","shuffle","not","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","getFilledArray","val","len","rv","Array","unique","originalArr","arr","indexOf","push","first","condition","last","stackQueueBase","baseArray","_arr","__array__","add","isArray","prototype","apply","stack","defaultArray","remove","pop","peek","queue","shift","internals","isString","testVar","isNumber","isDate","Object","toString","assert","assertMessage","TypeError","t2","t1","empty","test","key","hasOwnProperty","string","boolean","null","undefined","defined","object","function","date","prop","getDate","Date","setLastDayOfMonth","dt","setMonth","getMonth","lastDayOfMonth","getTime","setDate","getLastDayOfMonth","getFullYear","addMilliseconds","milliseconds","setMilliseconds","getMilliseconds","addSeconds","seconds","setSeconds","getSeconds","addMinutes","minutes","setMinutes","getMinutes","addHours","hours","setHours","getHours","addDays","days","addMonths","months","addYears","years","setFullYear","getMonths","index","month","name","shortName","once","fn","result","arguments","debounce","wait","timeout","callNow","clearTimeout","setTimeout","execute","executeFn","executer","conditionFn","maxTicks","tick","isNaN","bind","when","conditionFb","_tick","_maxTicks","subscribers","broadcast","to","callArguments","slice","listen","subscribe","cb","deepSealOrFreez","obj","action","getOwnPropertyNames","forEach","isSealed","deepFreez","freez","deepSeal","seal","extend","replaceAll","whatToReplace","replaceWith","replace","RegExp","capitalize","toUpperCase","contains","substring","ignoreCase","toLowerCase","chop","step","String","match","clean","trim","truncate","appender","between","startStr","endStr","startIndex","endIndex","substr"],"mappings":"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","file":"sn.min.js","sourcesContent":["/*****************************************************\n\t  s.js https://github.com/snovakovic/s.js\n    author: stefan.novakovich@gmail.com\n    version: 0.0.1\n ***************************************************/\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n      (global.sn = factory());\n} (this, (function () {\n\n  'use strict';\n\n  var __EC__; //execution context\n\n  function sn(executionContext) {\n    __EC__ = executionContext;\n    return sn;\n  }\n\n  //app files will be concatenated here and then this will be closed with sn.end.js\n\n","  return sn;\n})));\n","(function (sn) {\n\n\n    /**********************************************\n    * Loop over array or string. this in callback function will be set to array we are looping over.\n    * @param callback {Function} callback function that will be called on each iteration\n    ************************************************/\n    sn.each = function (callback) {\n        if (__EC__ && __EC__.length) {\n            for (var i = 0; i < __EC__.length; i++) {\n                if (callback.call(__EC__, __EC__[i], i) === false) {\n                    break;\n                }\n            }\n        }\n        return sn;\n    };\n\n\n    /**********************************************\n    * Iterate specific number of times.\n    * @param l {Number} number of times we want to iterate\n    * @param callback {Function} callback function that will be called on each iteration\n    ************************************************/\n    sn.iterate = function (callback) {\n        var iterations = Number(__EC__);\n        if (sn(iterations).is.number()) {\n            for (var i = 0; i < iterations; i++) {\n                if (callback.call(null, i) === false) {\n                    break;\n                }\n            }\n        }\n\n        return sn;\n    };\n\n\n    /*******************************************************\n    * Shuffle values in the array\n    * https://github.com/Daplie/knuth-shuffle\n    * @return {Array} shuffled array\n    ********************************************************/\n    sn.shuffle = function () {\n        if(sn(__EC__).not.array()) {\n            return;\n        }\n\n        var currentIndex = __EC__.length;\n        var temporaryValue;\n        var randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            temporaryValue = __EC__[currentIndex];\n            __EC__[currentIndex] = __EC__[randomIndex];\n            __EC__[randomIndex] = temporaryValue;\n        }\n\n        return __EC__;\n    };\n\n\n    /*********************************************\n    * Get the new array filled with default values\n    * @param val {Any} default array value\n    * @return len {Integer} size of the new array\n    **********************************************/\n    sn.getFilledArray = function (val, len) {\n        var rv = new Array(len);\n        while (--len >= 0) {\n            rv[len] = val;\n        }\n        return rv;\n    };\n\n\n    /*************************************************\n    * Returns new array containing only unique values from original array\n    * Doesn't support nested objects and array\n    * @param originalArr {Array} array form where we want to remove duplicate values\n    * @return array without duplicate values\n    ***********************************************/\n    sn.unique = function (originalArr) {\n        var arr = [];\n        for (var i = 0; i < originalArr.length; i++) {\n            if (arr.indexOf(originalArr[i]) === -1) {\n                arr.push(originalArr[i]);\n            }\n        }\n        return arr;\n    };\n\n\n    /********************************************s\n    * Returns first element of array if no condition is passed,\n    * else if there is condition returns first element of array that meets condition\n    * @param arr {Array} array we want to search in for value\n    * @param condition {Function} function that returns true if value is found.\n    * @return array item if found or undefined if not found\n    **********************************************/\n    sn.first = function (arr, condition) {\n        if (arr && arr.length) {\n            if (condition) {\n                for (var i = 0; i < arr.length; i++) {\n                    if (condition(arr[i])) {\n                        return arr[i];\n                    }\n                }\n            } else {\n                return arr[0];\n            }\n        }\n\n        return undefined;\n\n    };\n\n    /**********************************************************\n    * Returns last element of array if no condition is passed,\n    * else if there is condition returns last element of array that meets condition\n    * @param arr {Array} [optional] array we want to search in for value\n    * @param condition {Function} function that returns true if value is found.\n    * @return array item if found or undefined if not found\n    ***********************************************************/\n    sn.last = function (arr, condition) {\n        if (arr && arr.length) {\n            if (condition) {\n                for (var i = arr.length - 1; i >= 0; i--) {\n                    if (condition(arr[i])) {\n                        return arr[i];\n                    }\n                }\n            } else {\n                return arr[arr.length - 1];\n            }\n        }\n\n        return undefined;\n\n    };\n\n\n    //Stack && Queue implementation\n    (function (sn) {\n\n        var stackQueueBase = function (baseArray) {\n            var _arr = this.__array__ = baseArray || [];\n\n            this.add = function (val) {\n                Array.isArray(val)\n                    ? Array.prototype.push.apply(_arr, val)\n                    : _arr.push(val);\n            };\n\n            this.length = function () {\n                return _arr.length;\n            };\n\n            return this;\n\n        };\n\n\n        /*********************************************\n         * Stack implementation LIFO last in first out\n         * @param defaultArray [optional] {Array} default array that will be used as a stack base\n        *********************************************/\n        sn.stack = function (defaultArray) {\n            var stack = new stackQueueBase(defaultArray);\n            stack.remove = function () {\n                var _arr = this.__array__;\n                return _arr.length ? _arr.pop() : null;\n            };\n            stack.peek = function () {\n                var _arr = this.__array__;\n                return _arr.length ? _arr[_arr.length - 1] : null;\n            };\n\n            return stack;\n        };\n\n\n        /*********************************************\n        * Queue implementation FIFO: first in first out\n        * @param defaultArray [optional] {Array} default array that will be used as a queue base\n        *********************************************/\n        sn.queue = function (defaultArray) {\n            var queue = new stackQueueBase(defaultArray);\n            queue.remove = function () {\n                var _arr = this.__array__;\n                return _arr.length ? _arr.shift() : null;\n            };\n            queue.peek = function () {\n                var _arr = this.__array__;\n                return _arr.length ? _arr[0] : null;\n            };\n\n            return queue;\n        };\n\n    })(sn);\n\n\n})(sn);\n","(function (sn) {\n\n    var internals = {\n        isString: function (testVar) {\n            return typeof testVar === 'string';\n        },\n        isNumber: function (testVar) {\n            //NaN will produce false because NaN !== NaN\n            return typeof testVar === 'number' && testVar === testVar;\n        },\n        isDate: function (testVar) {\n            return Object.prototype.toString.call(testVar) === '[object Date]';\n        },\n        assert: function (val, assertMessage) {\n            if (val) {\n                return val;\n            }\n            throw new TypeError(assertMessage);\n        }\n\n    };\n\n\n\n    /****************************************\n    * Safely check if two variables are the same without JS coercion gotchas\n    * == is used when comparing string and numbers (with exception for emptySting == 0 which is false as it should be)\n    * == is used for compering null and undefined\n    * for everything else === is used.\n    * ********************************* */\n    sn.is = function (t2) {\n        var t1 = __EC__;\n        if ((internals.isString(t1) || internals.isNumber(t1)) && (internals.isString(t2) || internals.isNumber(t2))) {\n            //this covers coercion between string and number without any gotchas\n            return (typeof t1 === typeof t2)\n                ? t1 === t2\n                : t1 == t2 && t1 !== '' && t2 !== '';\n\n        } else if (t1 == null && t2 == null) {\n            //This covers when vars are either null or undefined without any gotchas\n            return true;\n        }\n\n        return t1 === t2;\n\n    };\n\n\n    /****************************************************\n     * Test if variable has been defined and is not empty,\n     * Following will be treated as false\n     * sn(null).is.empty(); => true\n     * sn(undefined).is.empty(); => true\n     * sn({}).is.empty(); => true\n     * sn([]).is.empty(); => true\n     * sn(' ').is.empty(); => true\n     * sn('\\n\\t').is.empty(); => true\n    ********************************************************/\n    sn.is.empty = function () {\n        if (__EC__ == null\n            || (typeof __EC__ === 'string' && (/^\\s*$/).test(__EC__))) {\n            return true;\n        }\n\n        if (typeof __EC__ === 'object') {\n            for (var key in __EC__) {\n                if (__EC__.hasOwnProperty(key)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        return false;\n    };\n\n\n    /***************************************\n     * START: data type checks\n     **************************************/\n    sn.is.string = function () {\n        return internals.isString(__EC__);\n    };\n\n    sn.is.number = function () {\n        return internals.isNumber(__EC__);\n    };\n\n    sn.is.boolean = function () {\n        return typeof __EC__ === 'boolean';\n    };\n\n    sn.is.null = function () {\n        return __EC__ === null;\n    };\n\n    sn.is.undefined = function () {\n        typeof __EC__ === 'undefined';\n    };\n\n    //not null and undefined\n    sn.is.defined = function () {\n        return __EC__ != null;\n    };\n\n    sn.is.object = function () {\n        return typeof __EC__ === 'object'\n            && __EC__ !== null\n            && !Array.isArray(__EC__);\n    };\n\n    sn.is.function = function () {\n        return typeof __EC__ === 'function';\n    };\n\n    sn.is.array = function () {\n        return typeof __EC__ === 'object' && Array.isArray(__EC__);\n    };\n\n    sn.is.date = function () {\n        return internals.isDate(__EC__);\n    };\n\n    /***************************************\n    * END: data type checks\n    **************************************/\n\n\n    /*************************************\n    * START: ASSERT && NOT MODULE DEFINITION\n    **************************************/\n    sn.not = function (val) {\n        return !sn.is(val);\n    };\n\n    sn.assert = {\n        is: function (val) {\n            return internals.assert(sn.is(val), 'Values are not the same.');\n        },\n        not: function (val) {\n            return internals.assert(!sn.is(val), 'Values are the same.');\n        }\n    };\n\n    for (var prop in sn.is) {\n        if (sn.is.hasOwnProperty(prop)) {\n            (function (prop) {\n                sn.not[prop] = function () {\n                    return !sn.is[prop]();\n                };\n                sn.assert.is[prop] = function () {\n                    return internals.assert(sn.is[prop](), 'Provided value is not ' + prop + '.');\n                };\n                sn.assert.not[prop] = function () {\n                    return internals.assert(!sn.is[prop](), 'Provided value is ' + prop + '.');\n                };\n            })(prop);\n        }\n    }\n\n    /*************************************\n    * END: ASSERT MODULE DEFINITION\n    **************************************/\n\n\n})(sn);\n","(function (sn) {\n\n  //PRIVATE\n  var getDate = function () {\n    if (__EC__) {\n      sn.assert.is.date(__EC__);\n      return __EC__;\n    }\n    return new Date();\n  };\n\n\n\n  //PUBLIC\n\n  /**********************************************\n  * Change provided date so that it point to last day of current month\n  ************************************************/\n  sn.setLastDayOfMonth = function () {\n    var dt = getDate();\n    dt.setMonth(dt.getMonth() + 1, 0);\n    return dt;\n  };\n\n\n  /**********************************************\n  * Check if day in date is last day of month\n  * @return true -> day is last day of month; false - day is not last day of month\n  ************************************************/\n  sn.is.lastDayOfMonth = function () {\n    var dt = getDate();\n    var test = new Date(dt.getTime());\n    test.setDate(test.getDate() + 1);\n    return test.getDate() === 1;\n  };\n\n\n  /**********************************************\n  * Check if day in date is last day of month\n  * @return true -> day is last day of month; false - day is not last day of month\n  ************************************************/\n  sn.getLastDayOfMonth = function () {\n    var dt = getDate();\n    return (new Date(dt.getFullYear(), dt.getMonth() + 1, 0)).getDate();\n  };\n\n\n  /**********************************************\n  * Add or remove dates from provided date\n  * @param milliseconds {Number} +/- milliseconds to add or remove from date\n  ************************************************/\n  sn.addMilliseconds = function (milliseconds) {\n    var dt = getDate();\n    dt.setMilliseconds(dt.getMilliseconds() + milliseconds);\n    return dt;\n  };\n\n  /**********************************************\n  * Add or remove dates from provided date\n  * @param seconds {Number} +/- seconds to add or remove from date\n  ************************************************/\n  sn.addSeconds = function (seconds) {\n    var dt = getDate();\n    dt.setSeconds(dt.getSeconds() + seconds);\n    return dt;\n  };\n\n  /**********************************************\n  * Add or remove dates from provided date\n  * @param minutes {Number} +/- minutes to add or remove from date\n  ************************************************/\n  sn.addMinutes = function (minutes) {\n    var dt = getDate();\n    dt.setMinutes(dt.getMinutes() + minutes);\n    return dt;\n  };\n\n  /**********************************************\n  * Add or remove dates from provided date\n  * @param hours {Number} +/- hours to add or remove from date\n  ************************************************/\n  sn.addHours = function (hours) {\n    var dt = getDate();\n    dt.setHours(dt.getHours() + hours);\n    return dt;\n  };\n\n  /**********************************************\n  * Add or remove dates from provided date\n  * @param days {Number} +/- days to add or remove from date\n  ************************************************/\n  sn.addDays = function (days) {\n    var dt = getDate();\n    dt.setDate(dt.getDate() + days);\n    return dt;\n  };\n\n  /**********************************************\n  * Add or remove dates from provided date\n  * @param months {Number} +/- months to add or remove from date\n  ************************************************/\n  sn.addMonths = function (months) {\n    var dt = getDate();\n    dt.setMonth(dt.getMonth() + months);\n    return dt;\n  };\n\n  /**********************************************\n  * Add or remove dates from provided date\n  * @param years {Number} +/- years to add or remove from date\n  ************************************************/\n  sn.addYears = function (years) {\n    var dt = getDate();\n    dt.setFullYear(dt.getFullYear() + years);\n    return dt;\n  };\n\n  /**********************************************\n  * Get the list of english months with fullName, shortName and month index\n  ************************************************/\n  sn.getMonths = function () {\n    return [\n      {\n        index: 0,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'January',\n        shortName: 'Jan',\n        days: 31\n      }, {\n        index: 1,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'February',\n        shortName: 'Feb',\n        days: [28, 29]\n      }, {\n        index: 2,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'March',\n        shortName: 'Mar',\n        days: 31\n      }, {\n        index: 3,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'April',\n        shortName: 'Apr',\n        days: 30\n      }, {\n        index: 4,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'May',\n        shortName: 'May',\n        days: 31\n      }, {\n        index: 5,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'June',\n        shortName: 'Jun',\n        days: 30\n      }, {\n        index: 6,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'July',\n        shortName: 'Jul',\n        days: 31\n      }, {\n        index: 7,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'August',\n        shortName: 'Aug',\n        days: 31\n      }, {\n        index: 8,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'September',\n        shortName: 'Sep',\n        days: 30\n      }, {\n        index: 9,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'October',\n        shortName: 'Oct',\n        days: 31\n      }, {\n        index: 10,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'November',\n        shortName: 'Nov',\n        days: 30\n      }, {\n        index: 11,\n        get month() {\n          return this.index + 1;\n        },\n        name: 'December',\n        shortName: 'Dec',\n        days: 31\n      }\n    ];\n  };\n\n})(sn);\n","/**********************************************\n* returns function that can be executed only once\n* Result of function execution is cached and can be accesed latter by calling that function\n************************************************/\nsn.once = function(fn) {\n  var result;\n  return function() {\n    if (fn) {\n      result = fn.apply(this, arguments);\n      fn = null;\n    }\n    return result;\n  };\n};\n\n/**********************************************\n* Returns a function, that, as long as it continues to be invoked, will not be triggered\n* Default wait time for debounce is 200ms.\n ************************************************/\nsn.debounce = function(fn, wait) {\n  var timeout;\n  return function() {\n    var callNow = !timeout;\n\n    clearTimeout(timeout);\n    timeout = setTimeout(function() {\n      timeout = null;\n    }, wait);\n\n    if (callNow) { fn.apply(this, arguments); }\n  };\n};\n\n/*************************\n* execute function when condition becomes true\n************************/\nsn.execute = function(executeFn) {\n  return (function() {\n    var tick;\n    var maxTicks;\n\n    function executer(conditionFn) {\n      if (maxTicks < -tick) {\n        return;\n      } else if (!isNaN(maxTicks)) {\n        maxTicks -= tick;\n      }\n\n      conditionFn() ? executeFn() : setTimeout(executer.bind(null, conditionFn), tick);\n    }\n\n    return {\n      when: function(conditionFb, _tick, _maxTicks) {\n        tick = _tick || 5;\n        maxTicks = _maxTicks;\n        executer(conditionFb);\n      }\n\n    };\n  })();\n};\n\n/*****************************\n * sMsg - broadcast messages\n ****************************/\n(function(sn) {\n  var subscribers = {};\n\n  sn.broadcast = function(to) {\n    var callArguments = Array.prototype.slice.call(arguments, 1, arguments.length);\n    for (var i = 0; i < subscribers[to].length; i++) {\n      subscribers[to][i].apply(this, callArguments);\n    }\n  };\n\n  sn.listen = function(subscribe, cb) {\n    subscribers[subscribe] = subscribers[subscribe] || [];\n    subscribers[subscribe].push(cb);\n  };\n\n})(sn);\n","//DeepFreez / DeepSeal\n(function (sn) {\n\n    /**********************************************\n    * Apply Object.freez on object and each children object as deep as it goes.\n    * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n    ************************************************/\n    sn.deepFreez = function deepFreez(obj) {\n        return deepSealOrFreez(obj, Object.freez);\n    };\n\n    /**********************************************\n    * Apply Object.seal on object and each children object as deep as it goes.\n    * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\n    ************************************************/\n    sn.deepSeal = function deepSeal(obj) {\n        return deepSealOrFreez(obj, Object.seal);\n    };\n\n    function deepSealOrFreez(obj, action) {\n        action(obj);\n\n        Object.getOwnPropertyNames(obj).forEach(function (key) {\n            if (obj.hasOwnProperty(key)\n                && obj[key] !== null\n                && (typeof obj[key] === 'object' || typeof obj[key] === 'function')\n                && !Object.isSealed(obj[key])) {\n                deepSealOrFreez(obj[key]);\n            }\n        });\n\n        return obj;\n    }\n\n})(sn);\n\n\n\n/**********************************************\n* Extend object with the properties from other provided objects.\n* In case of same propertie names value from first object will be overriden with the value from second object\n************************************************/\nsn.extend = function () {\n    for (var i = 1; i < arguments.length; i++) {\n        Object.getOwnPropertyNames(arguments[i]).forEach(function (key) {\n            if (arguments[i].hasOwnProperty(key)) {\n                arguments[0][key] = arguments[i][key]\n            }\n        });\n    }\n    return arguments[0];\n};\n","(function (sn) {\n\n  //PUBLIC\n\n\n  /**************************************************\n  * Remove all occurrences of substring in string\n  * @param whatToReplace {String}\n  * @param replaceWith {String}\n  * @return {String} string with replaced old values with new values\n  **************************************************/\n  sn.replaceAll = function (whatToReplace, replaceWith) {\n    return typeof __EC__ === 'string'\n      ? __EC__.replace(new RegExp(whatToReplace.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replaceWith)\n      : __EC__;\n  };\n\n\n  /**************************************************\n  * Capitalize string\n  * @return {String} capitalized string\n  **************************************************/\n  sn.capitalize = function () {\n    return typeof __EC__ === 'string'\n      ? __EC__[(0)].toUpperCase() + __EC__.slice(1)\n      : __EC__;\n  };\n\n\n  /**************************************************\n  * test if string contains substring\n  * @param substring {String} substring we want to check for existance\n  * @param ignoreCase {Boolean} if true ignore case when comparing string\n  * @example capitalize('foo Bar', 'oo'); => 'Foo Bar'; capitalize('FOO Bar', true); => 'Foo bar'\n  * https://github.com/epeli/underscore.string\n  **************************************************/\n  sn.contains = function (substring, ignoreCase) {\n    if (ignoreCase === true) {\n      __EC__ = __EC__.toLowerCase();\n      substring = substring.toLowerCase();\n    }\n\n    return __EC__.indexOf(substring) !== -1;\n  };\n\n\n  /**************************************************\n  * Break string in array of substring.\n  * @param step {Number} length of chopped substrings\n  * @example: chop(\"whitespace\", 3); => ['whi', 'tes', 'pac', 'e']\n  * @return {Array} array containing chopped substrings\n  **************************************************/\n  sn.chop = function (step) {\n    if (!__EC__) { return []; }\n    __EC__ = String(__EC__);\n    step = ~~step;\n    return step > 0 ? __EC__.match(new RegExp('.{1,' + step + '}', 'g')) : [__EC__];\n  };\n\n\n  /**************************************************\n  * Trim and replace multiple spaces with a single space.\n  * @return {String} trimmed and cleaned string\n  **************************************************/\n  sn.clean = function () {\n    return __EC__.trim().replace(/\\s\\s+/g, ' ');\n  };\n\n\n  /**********************************************\n  * Truncate string if it exceed max number of characters,\n  * apply provided truncate string at the end of truncated string (default: '...')\n  * @param length {Number} cut the string after this number of characters\n  * @param appender [optional, default: '...'] {String} string that will be appended to truncated string\n  * @return {String} truncated string\n  **********************************************/\n  sn.truncate = function (length, appender) {\n    appender = appender || '...';\n    appender = ~~appender;\n    return __EC__.length > length ? __EC__.slice(0, length) + appender : __EC__;\n  };\n\n\n  /**********************************************\n  * get part of the string between 2 words.\n  * @param startStr {String}\n  * @param endStr {String}\n  * @return {String} string between startStr and endStr\n  ***********************************************/\n  sn.between = function (startStr, endStr) {\n    var startIndex = __EC__.indexOf(startStr);\n    var endIndex = __EC__.indexOf(endStr);\n\n    if (startIndex === -1 || startIndex === -1) {\n      return undefined;\n    }\n\n    startIndex += startStr.length;\n    return __EC__.substr(startIndex, endIndex - startIndex);\n  };\n\n})(sn);\n"]}