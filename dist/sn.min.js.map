{"version":3,"sources":["sn.js","sn.end.js","sn.array.js","sn.assert.js","sn.date.js","sn.function.js","sn.object.js","sn.string.js"],"names":["global","factory","exports","module","define","amd","sn","this","executionContext","__EC__","_return","returnValue","__chain__","_returnImmediate","_clearContext","undefined","_isString","val","_isNumber","_isDate","Object","prototype","toString","call","_isArray","Array","isArray","defineProperty","get","each","cb","i","length","internals","stackQueueBase","baseArray","_arr","__array__","add","push","apply","forEach","iterate","callback","iterations","Number","shuffle","temporaryValue","randomIndex","currentIndex","Math","floor","random","fillArray","len","rv","toArray","hasOwnProperty","slice","unique","path","pathUniqueValues","arr","pathTokens","split","n","TypeError","indexOf","first","condition","last","stack","defaultArray","remove","pop","peek","queue","shift","assert","assertMessage","is","t2","t1","empty","test","key","string","number","boolean","null","defined","object","function","array","date","not","prop","getDate","Date","setLastDayOfMonth","dt","setMonth","getMonth","lastDayOfMonth","getTime","setDate","getLastDayOfMonth","getFullYear","addMilliseconds","milliseconds","setMilliseconds","getMilliseconds","addSeconds","seconds","setSeconds","getSeconds","addMinutes","minutes","setMinutes","getMinutes","addHours","hours","setHours","getHours","addDays","days","addMonths","months","addYears","years","setFullYear","getMonths","index","month","name","shortName","once","fn","result","arguments","debounce","wait","timeout","callNow","clearTimeout","setTimeout","execute","executeFn","executer","conditionFn","maxTicks","tick","isNaN","bind","when","conditionFb","_tick","_maxTicks","subscribers","broadcast","to","callArguments","listen","subscribe","deepSealOrFreez","obj","action","check","getOwnPropertyNames","deepFreeze","freeze","isFrozen","deepSeal","seal","isSealed","extend","objects","unshift","isString","replaceAll","whatToReplace","replaceWith","replace","RegExp","capitalize","toUpperCase","contains","substring","ignoreCase","toLowerCase","chop","step","String","match","clean","trim","truncate","appender","between","str1","str2","index1","index2","substr"],"mappings":"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","file":"sn.min.js","sourcesContent":["/*****************************************************\n\ts.js https://github.com/snovakovic/s.js\n    author: stefan.novakovich@gmail.com\n    version: 0.0.1\n ***************************************************/\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n        typeof define === 'function' && define.amd ? define(factory) :\n            (global.sn = factory());\n} (this, (function () {\n\n    'use strict';\n\n    var __EC__; //execution context\n    var __chain__; //return it's self except value\n\n    function sn(executionContext) {\n        __EC__ = executionContext;\n        return sn;\n    }\n\n    /**********************************************\n    * chaining operator allows us to chain methods sn().metod1()._.metod2()\n    ************************************************/\n    Object.defineProperty(sn, '_', {\n        get: function () {\n            __chain__ = true;\n            return sn;\n        }\n    });\n\n\n    /**********************************************\n    * !!!Each public method should use this to return value\n    * _return cleans current context and enables chaining\n    ************************************************/\n    function _return(returnValue) {\n        if (__chain__) {\n            __EC__ = returnValue;\n            __chain__ = false;\n            return sn;\n        }\n\n        return _returnImmediate(returnValue);\n    }\n\n    /**********************************************\n    * Used for functions that does not support chaining\n    ************************************************/\n    function _returnImmediate(returnValue) {\n        _clearContext();\n        return returnValue;\n    }\n\n    function _clearContext() {\n        __EC__ = undefined;\n    }\n\n\n    //CORE FUNCTIONS USED ACCROSS MODULES\n    function _isString(val) {\n        return typeof val === 'string';\n    }\n\n    function _isNumber(val) {\n        //NaN will produce false because NaN !== NaN\n        return typeof val === 'number' && val === val;\n    }\n\n    function _isDate(val) {\n        return !!val && Object.prototype.toString.call(val) === '[object Date]';\n    }\n\n    function _isArray(val) {\n        return Array.isArray(val);\n    }\n\n\n  //app files will be concatenated here and then this will be closed with sn.end.js\n\n","  return sn;\r\n})));\r\n","(function (global) {\n\n    var internals = {\n        stackQueueBase: function (baseArray) {\n            var _arr = this.__array__ = baseArray || [];\n\n            this.add = function (val) {\n                _isArray(val)\n                    ? Array.prototype.push.apply(_arr, val)\n                    : _arr.push(val);\n            };\n\n            this.length = function () {\n                return _arr.length;\n            };\n\n            return this;\n\n        }\n    };\n\n\n\n    /**********************************************\n    * Loop over array or string. this in callback function will be set to array we are looping over.\n    * @param callback {Function} callback function that will be called on each iteration\n    ************************************************/\n    function each(cb) {\n        if (__EC__) {\n            for (var i = 0; i < __EC__.length; i++) {\n                if (cb.call(__EC__, __EC__[i], i) === false) {\n                    break;\n                }\n            }\n        }\n\n        return _returnImmediate();\n\n    }\n\n    global.each = each;\n\n    global.forEach = each;\n\n\n    /**********************************************\n    * Iterate specific number of times.\n    * @param l {Number} number of times we want to iterate\n    * @param callback {Function} callback function that will be called on each iteration\n    ************************************************/\n    global.iterate = function (callback) {\n        var iterations = Number(__EC__);\n        if (_isNumber(iterations)) {\n            for (var i = 0; i < iterations; i++) {\n                if (callback.call(null, i) === false) {\n                    break;\n                }\n            }\n        }\n\n        return _returnImmediate();\n    };\n\n\n    /*******************************************************\n    * Shuffle values in the array\n    * https://github.com/Daplie/knuth-shuffle\n    * @return {Array} shuffled array\n    ********************************************************/\n    global.shuffle = function () {\n        if (!_isArray(__EC__)) {\n            return _return(__EC__);\n        }\n\n        var currentIndex = __EC__.length;\n        var temporaryValue;\n        var randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            temporaryValue = __EC__[currentIndex];\n            __EC__[currentIndex] = __EC__[randomIndex];\n            __EC__[randomIndex] = temporaryValue;\n        }\n\n        return _return(__EC__);\n    };\n\n\n    /*********************************************\n    * Get new array filled with default values\n    * @param val {Any} default array value\n    * @return len {Integer} size of the new array\n    **********************************************/\n    global.fillArray = function (len) {\n        var rv = new Array(len);\n        while (--len >= 0) {\n            rv[len] = __EC__;\n        }\n        return _return(rv);\n    };\n\n\n    /*********************************************\n    * Returns array.\n    * Convert array likes to array (arrguments etc..)\n    * If array return unmodified array\n    * Wrap any other value with array\n    **********************************************/\n    global.toArray = function () {\n        var returnValue;\n        if (__EC__ == null) {\n            returnValue = [];\n        }\n\n        else if (_isArray(__EC__)) {\n            returnValue = __EC__;\n        }\n\n        else {\n            //convert array like object to array or otherwise wrap values with array.\n            returnValue = typeof __EC__ === 'object' && __EC__.hasOwnProperty('length') && typeof __EC__.length === 'number'\n                ? Array.prototype.slice.call(__EC__)\n                : [__EC__];\n        }\n\n        return _return(returnValue);\n    };\n\n\n    /*************************************************\n    * Returns new array containing only unique values from original array\n    * Doesn't support nested objects and array\n    * @param path {String} path to object property to compare for uniqueness\n    * @return array without duplicate values :\"\"LK\n    ***********************************************/\n    global.unique = function (path) {\n        if (_isArray(__EC__)) {\n            var pathUniqueValues = [];\n            var arr = [];\n            for (var i = 0; i < __EC__.length; i++) {\n                if (path) {\n                    var pathTokens = path.split('.');\n                    var val = __EC__[i];\n                    for (var n = 0; n < pathTokens.length; n++) {\n                        val = val[pathTokens[n]];\n                        if (!val) {\n                            throw TypeError('Invalid path. Object property does not exist');\n                        }\n                    }\n\n                    if (pathUniqueValues.indexOf(val) === -1) {\n                        arr.push(__EC__[i]);\n                        pathUniqueValues.push(val);\n                    }\n\n                }\n                else if (arr.indexOf(__EC__[i]) === -1) {\n                    arr.push(__EC__[i]);\n                }\n            }\n\n            return _return(arr);\n        }\n\n        return _return(__EC__);\n    };\n\n\n    /********************************************s\n    * Returns first element of array if no condition is passed,\n    * else if there is condition returns first element of array that meets condition\n    * @param condition {Function} function that returns true if value is found.\n    * @return array item if found or undefined if not found\n    **********************************************/\n    global.first = function (condition) {\n        if (__EC__ && __EC__.length) {\n            if (condition) {\n                for (var i = 0; i < __EC__.length; i++) {\n                    if (condition(__EC__[i])) {\n                        return _return(__EC__[i]);\n                    }\n                }\n            } else {\n                return _return(__EC__[0]);\n            }\n        }\n\n        return _return(undefined);\n\n    };\n\n\n    /**********************************************************\n    * Returns last element of array if no condition is passed,\n    * else if there is condition returns last element of array that meets condition\n    * @param condition {Function} function that returns true if value is found.\n    * @return array item if found or undefined if not found\n    ***********************************************************/\n    global.last = function (condition) {\n        if (__EC__ && __EC__.length) {\n            if (condition) {\n                for (var i = __EC__.length - 1; i >= 0; i--) {\n                    if (condition(__EC__[i])) {\n                        return _return(__EC__[i]);\n                    }\n                }\n            } else {\n                return _return(__EC__[__EC__.length - 1]);\n            }\n        }\n\n        return _return(undefined);\n\n    };\n\n\n    /*********************************************\n     * Stack implementation LIFO last in first out\n     * @param defaultArray [optional] {Array} default array that will be used as a stack base\n    *********************************************/\n    global.stack = function (defaultArray) {\n        var stack = new internals.stackQueueBase(defaultArray);\n        stack.remove = function () {\n            var _arr = this.__array__;\n            return _arr.length ? _arr.pop() : null;\n        };\n        stack.peek = function () {\n            var _arr = this.__array__;\n            return _arr.length ? _arr[_arr.length - 1] : null;\n        };\n\n        return stack;\n    };\n\n\n    /*********************************************\n    * Queue implementation FIFO: first in first out\n    * @param defaultArray [optional] {Array} default array that will be used as a queue base\n    *********************************************/\n    global.queue = function (defaultArray) {\n        var queue = new internals.stackQueueBase(defaultArray);\n        queue.remove = function () {\n            var _arr = this.__array__;\n            return _arr.length ? _arr.shift() : null;\n        };\n        queue.peek = function () {\n            var _arr = this.__array__;\n            return _arr.length ? _arr[0] : null;\n        };\n\n        return queue;\n    };\n\n\n})(sn);\n","(function(global) {\n\n    /****************************************\n    * Safely check if two variables are the same without JS coercion gotchas\n    * == is used when comparing string and numbers (with exception for emptySting == 0 which is false as it should be)\n    * == is used for compering null and undefined\n    * for everything else === is used.\n    * ********************************* */\n    global.is = function(t2) {\n        var t1 = __EC__;\n        if ((_isString(t1) || _isNumber(t1)) && (_isString(t2) || _isNumber(t2))) {\n            //this covers coercion between string and number without any gotchas\n            return _returnImmediate((typeof t1 === typeof t2)\n                ? t1 === t2\n                : t1 == t2 && t1 !== '' && t2 !== '');\n\n        } else if (t1 == null && t2 == null) {\n            //This covers when vars are either null or undefined without any gotchas\n            return _returnImmediate(true);\n        }\n\n        return _returnImmediate(t1 === t2);\n\n    };\n\n\n    /****************************************************\n     * Test if variable has been defined and is not empty,\n     * Following will be treated as false\n     * sn(null).is.empty(); => true\n     * sn(undefined).is.empty(); => true\n     * sn({}).is.empty(); => true\n     * sn([]).is.empty(); => true\n     * sn(' ').is.empty(); => true\n     * sn('\\n\\t').is.empty(); => true\n    ********************************************************/\n    global.is.empty = function() {\n        if (__EC__ == null\n            || (typeof __EC__ === 'string' && (/^\\s*$/).test(__EC__))) {\n            return _returnImmediate(true);\n        }\n\n        if (typeof __EC__ === 'object') {\n            for (var key in __EC__) {\n                if (__EC__.hasOwnProperty(key)) {\n                    return _returnImmediate(false);\n                }\n            }\n            return _returnImmediate(true);\n        }\n\n        return _returnImmediate(false);\n    };\n\n\n    /***************************************\n     * START: data type checks\n     **************************************/\n    global.is.string = function() {\n        return _returnImmediate(_isString(__EC__));\n    };\n\n\n    global.is.number = function() {\n        return _returnImmediate(_isNumber(__EC__));\n    };\n\n\n    global.is.boolean = function() {\n        return _returnImmediate(typeof __EC__ === 'boolean');\n    };\n\n\n    global.is.null = function() {\n        return _returnImmediate(__EC__ === null);\n    };\n\n\n    global.is.undefined = function() {\n        return _returnImmediate(typeof __EC__ === 'undefined');\n    };\n\n\n    //not null and undefined\n    global.is.defined = function() {\n        return _returnImmediate(__EC__ != null);\n    };\n\n\n    global.is.object = function() {\n        return _returnImmediate(typeof __EC__ === 'object'\n            && __EC__ !== null\n            && !_isArray(__EC__));\n    };\n\n\n    global.is.function = function() {\n        return _returnImmediate(typeof __EC__ === 'function');\n    };\n\n\n    global.is.array = function() {\n        return _returnImmediate(_isArray(__EC__));\n    };\n\n\n    global.is.date = function() {\n        return _returnImmediate(_isDate(__EC__));\n    };\n\n\n    /*************************************\n    * START: ASSERT && NOT MODULE DEFINITION\n    **************************************/\n\n    global.not = function(val) {\n        return !global.is(val);\n    };\n\n    function assert(val, assertMessage) {\n        if (val) {\n            return val;\n        }\n        throw new TypeError(assertMessage);\n    }\n\n    global.assert = {\n        is: function(val) {\n            return assert(global.is(val), 'Values are not the same.');\n        },\n        not: function(val) {\n            return assert(!global.is(val), 'Values are the same.');\n        }\n    };\n\n\n    for (var prop in global.is) {\n        if (global.is.hasOwnProperty(prop)) {\n            (function(prop) {\n                global.not[prop] = function() {\n                    return !global.is[prop]();\n                };\n                global.assert.is[prop] = function() {\n                    return assert(global.is[prop](), 'Provided value is not ' + prop + '.');\n                };\n                global.assert.not[prop] = function() {\n                    return assert(!global.is[prop](), 'Provided value is ' + prop + '.');\n                };\n            })(prop);\n        }\n    }\n\n\n})(sn);\n","(function (global) {\n\n    //PRIVATE\n    var getDate = function () {\n        if (_isDate(__EC__)) {\n            return __EC__;\n        }\n\n        return new Date();\n    };\n\n\n\n    //PUBLIC\n\n    /**********************************************\n    * Change provided date so that it point to last day of current month\n    ************************************************/\n    global.setLastDayOfMonth = function () {\n        var dt = getDate();\n        dt.setMonth(dt.getMonth() + 1, 0);\n        return _return(dt);\n    };\n\n\n    /**********************************************\n    * Check if day in date is last day of month\n    * @return true -> day is last day of month; false - day is not last day of month\n    ************************************************/\n    global.is.lastDayOfMonth = function () {\n        var dt = getDate();\n        var test = new Date(dt.getTime());\n        test.setDate(test.getDate() + 1);\n        return _return(test.getDate() === 1);\n    };\n\n\n    /**********************************************\n    * Check if day in date is last day of month\n    * @return true -> day is last day of month; false - day is not last day of month\n    ************************************************/\n    global.getLastDayOfMonth = function () {\n        var dt = getDate();\n        return _return((new Date(dt.getFullYear(), dt.getMonth() + 1, 0)).getDate());\n    };\n\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param milliseconds {Number} +/- milliseconds to add or remove from date\n    ************************************************/\n    global.addMilliseconds = function (milliseconds) {\n        var dt = getDate();\n        dt.setMilliseconds(dt.getMilliseconds() + milliseconds);\n        return _return(dt);\n    };\n\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param seconds {Number} +/- seconds to add or remove from date\n    ************************************************/\n    global.addSeconds = function (seconds) {\n        var dt = getDate();\n        dt.setSeconds(dt.getSeconds() + seconds);\n        return _return(dt);\n    };\n\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param minutes {Number} +/- minutes to add or remove from date\n    ************************************************/\n    global.addMinutes = function (minutes) {\n        var dt = getDate();\n        dt.setMinutes(dt.getMinutes() + minutes);\n        return _return(dt);\n    };\n\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param hours {Number} +/- hours to add or remove from date\n    ************************************************/\n    global.addHours = function (hours) {\n        var dt = getDate();\n        dt.setHours(dt.getHours() + hours);\n        return _return(dt);\n    };\n\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param days {Number} +/- days to add or remove from date\n    ************************************************/\n    global.addDays = function (days) {\n        var dt = getDate();\n        dt.setDate(dt.getDate() + days);\n        return _return(dt);\n    };\n\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param months {Number} +/- months to add or remove from date\n    ************************************************/\n    global.addMonths = function (months) {\n        var dt = getDate();\n        dt.setMonth(dt.getMonth() + months);\n        return _return(dt);\n    };\n\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param years {Number} +/- years to add or remove from date\n    ************************************************/\n    global.addYears = function (years) {\n        var dt = getDate();\n        dt.setFullYear(dt.getFullYear() + years);\n        return _return(dt);\n    };\n\n\n    /**********************************************\n    * Get the list of english months with fullName, shortName and month index\n    ************************************************/\n    //TODO: Make this shorter list of full name and short names + init forach\n    global.getMonths = function () {\n        return _return([\n            {\n                index: 0,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'January',\n                shortName: 'Jan',\n                days: 31\n            }, {\n                index: 1,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'February',\n                shortName: 'Feb',\n                days: [28, 29]\n            }, {\n                index: 2,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'March',\n                shortName: 'Mar',\n                days: 31\n            }, {\n                index: 3,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'April',\n                shortName: 'Apr',\n                days: 30\n            }, {\n                index: 4,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'May',\n                shortName: 'May',\n                days: 31\n            }, {\n                index: 5,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'June',\n                shortName: 'Jun',\n                days: 30\n            }, {\n                index: 6,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'July',\n                shortName: 'Jul',\n                days: 31\n            }, {\n                index: 7,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'August',\n                shortName: 'Aug',\n                days: 31\n            }, {\n                index: 8,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'September',\n                shortName: 'Sep',\n                days: 30\n            }, {\n                index: 9,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'October',\n                shortName: 'Oct',\n                days: 31\n            }, {\n                index: 10,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'November',\n                shortName: 'Nov',\n                days: 30\n            }, {\n                index: 11,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'December',\n                shortName: 'Dec',\n                days: 31\n            }\n        ]);\n    };\n\n})(sn);\n","(function (global) {\n\n    /**********************************************\n    * returns function that can be executed only once\n    * Result of function execution is cached and can be accesed latter by calling that function\n    ************************************************/\n    global.once = function (fn) {\n        _clearContext();\n        var result;\n        return function () {\n            if (fn) {\n                result = fn.apply(this, arguments);\n                fn = null;\n            }\n            return result;\n        };\n    };\n\n\n    /**********************************************\n    * Returns a function, that, as long as it continues to be invoked, will not be triggered\n    * Default wait time for debounce is 200ms.\n     ************************************************/\n    global.debounce = function (fn, wait) {\n        _clearContext();\n        var timeout;\n        return function () {\n            var callNow = !timeout;\n\n            clearTimeout(timeout);\n            timeout = setTimeout(function () {\n                timeout = null;\n            }, wait);\n\n            if (callNow) { fn.apply(this, arguments); }\n        };\n    };\n\n\n    /*************************\n    * execute function when condition becomes true\n    ************************/\n    global.execute = function (executeFn) {\n        _clearContext();\n        return (function () {\n            var tick;\n            var maxTicks;\n\n            function executer(conditionFn) {\n                if (maxTicks < -tick) {\n                    return;\n                } else if (!isNaN(maxTicks)) {\n                    maxTicks -= tick;\n                }\n\n                conditionFn() ? executeFn() : setTimeout(executer.bind(null, conditionFn), tick);\n            }\n\n            return {\n                when: function (conditionFb, _tick, _maxTicks) {\n                    tick = _tick || 5;\n                    maxTicks = _maxTicks;\n                    executer(conditionFb);\n                }\n\n            };\n        })();\n    };\n\n\n    /*****************************\n     * sMsg - broadcast messages\n     ****************************/\n    var subscribers = {};\n\n    global.broadcast = function (to) {\n        _clearContext();\n        var callArguments = Array.prototype.slice.call(arguments, 1, arguments.length);\n        for (var i = 0; i < subscribers[to].length; i++) {\n            subscribers[to][i].apply(this, callArguments);\n        }\n    };\n\n\n    global.listen = function (subscribe, cb) {\n        _clearContext();\n        subscribers[subscribe] = subscribers[subscribe] || [];\n        subscribers[subscribe].push(cb);\n    };\n\n\n})(sn);\n","(function (global) {\n\n\n    function deepSealOrFreez(obj, action, check) {\n        action(obj);\n\n        Object.getOwnPropertyNames(obj).forEach(function (key) {\n            if (obj.hasOwnProperty(key)\n                && obj[key] !== null\n                && (typeof obj[key] === 'object' || typeof obj[key] === 'function')\n                && !check(obj[key])) {\n                deepSealOrFreez(obj[key], action, check);\n            }\n        });\n\n        return obj;\n    }\n\n    /**********************************************\n    * Apply Object.freez recursively on object and property of object.\n    * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n    ************************************************/\n    global.deepFreeze = function deepFreez() {\n        return _return(deepSealOrFreez(__EC__, Object.freeze, Object.isFrozen));\n    };\n\n\n    /**********************************************\n    * Apply Object.seal recursively on object and property of object.\n    * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\n    ************************************************/\n    global.deepSeal = function deepSeal() {\n        return _return(deepSealOrFreez(__EC__, Object.seal, Object.isSealed));\n    };\n\n\n    /**********************************************\n    * Extend object with the properties from other provided objects.\n    * In case of same properties names value from first object will be overriden with the value from second object\n    ************************************************/\n    global.extend = function () {\n        var objects = Array.prototype.slice.call(arguments);\n        objects.unshift(__EC__);\n\n        for (var i = 1; i < objects.length; i++) {\n            Object.getOwnPropertyNames(objects[i]).forEach(function (key) {\n                if (objects[i].hasOwnProperty(key)) {\n                    objects[0][key] = objects[i][key];\n                }\n            });\n        }\n\n        return _return(objects[0]);\n    };\n\n})(sn);\n","(function(global) {\n\n    var internals = {\n        isString: function() {\n            for (var i = 0; i < arguments.length; i++) {\n                if (typeof arguments[i] !== 'string') {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n    };\n\n\n    /**************************************************\n    * Remove all occurrences of substring in string\n    * @param whatToReplace {String}\n    * @param replaceWith {String}\n    * @return {String} string with replaced old values with new values\n    **************************************************/\n    global.replaceAll = function(whatToReplace, replaceWith) {\n        return _return(internals.isString(__EC__, whatToReplace, replaceWith)\n            ? __EC__.replace(new RegExp(whatToReplace.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replaceWith)\n            : __EC__);\n    };\n\n\n    /**************************************************\n    * Capitalize string\n    * @return {String} capitalized string\n    **************************************************/\n    global.capitalize = function() {\n        return _return(internals.isString(__EC__)\n            ? __EC__[(0)].toUpperCase() + __EC__.slice(1)\n            : __EC__);\n    };\n\n\n    /**************************************************\n    * test if string contains substring\n    * @param substring {String} substring we want to check for existance\n    * @param ignoreCase {Boolean} if true ignore case when comparing string\n    * @example capitalize('foo Bar', 'oo'); => 'Foo Bar'; capitalize('FOO Bar', true); => 'Foo bar'\n    * https://github.com/epeli/underscore.string\n    **************************************************/\n    global.contains = function(substring, ignoreCase) {\n\n        if (internals.isString(__EC__, substring)) {\n            if (ignoreCase === true) {\n                __EC__ = __EC__.toLowerCase();\n                substring = substring.toLowerCase();\n            }\n\n            return _return(__EC__.indexOf(substring) !== -1);\n        }\n\n        return _return(false);\n\n    };\n\n\n    /**************************************************\n    * Break string in array of substring.\n    * @param step {Number} length of chopped substrings\n    * @example: chop(\"whitespace\", 3); => ['whi', 'tes', 'pac', 'e']\n    * @return {Array} array containing chopped substrings\n    **************************************************/\n    global.chop = function(step) {\n        if (internals.isString(__EC__)) {\n            __EC__ = String(__EC__);\n            step = ~~step;\n            return _return(step > 0\n                ? __EC__.match(new RegExp('.{1,' + step + '}', 'g'))\n                : [__EC__]);\n        }\n\n        return _return([]);\n    };\n\n\n    /**************************************************\n    * Trim and replace multiple spaces with a single space.\n    * @return {String} trimmed and cleaned string\n    **************************************************/\n    global.clean = function() {\n        return _return(internals.isString(__EC__)\n            ? __EC__.trim().replace(/\\s\\s+/g, ' ')\n            : __EC__);\n    };\n\n\n    /**********************************************\n    * Truncate string if it exceed max number of characters,\n    * apply provided truncate string at the end of truncated string (default: '...')\n    * @param length {Number} cut the string after this number of characters\n    * @param appender [optional, default: '...'] {String} string that will be appended to truncated string\n    * @return {String} truncated string\n    **********************************************/\n    global.truncate = function(length, appender) {\n        appender = appender || '...';\n        length = ~~length;\n        return _return((internals.isString(__EC__) && __EC__.length > length)\n            ? __EC__.slice(0, length) + appender\n            : __EC__);\n    };\n\n\n    /**********************************************\n    * Returns part of the string between 2 words.\n    * @param str1 {String}\n    * @param str2 {String}\n    * @return {String} string between startStr and endStr\n    ***********************************************/\n    global.between = function(str1, str2) {\n        var returnValue;\n        if (internals.isString(__EC__, str1, str2)) {\n            var index1 = __EC__.indexOf(str1);\n            var index2 = __EC__.indexOf(str2);\n\n            if (index1 === -1 || index2 === -1) {\n                returnValue = undefined;\n            }\n\n            else if (index2 > index1) {\n                index1 += str1.length;\n                returnValue = __EC__.substr(index1, index2 - index1);\n            }\n\n            else {\n                index2 += str2.length;\n                returnValue = __EC__.substr(index2, index1 - index2);\n            }\n\n        }\n\n        return _return(returnValue);\n\n    };\n\n})(sn);\n"]}