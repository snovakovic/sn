{"version":3,"sources":["sn.js","sn.end.js","sn.array.js","sn.assert.js","sn.date.js","sn.function.js","sn.object.js","sn.string.js"],"names":["global","factory","exports","module","define","amd","sn","this","executionContext","__EC__","_return","returnValue","__chain__","undefined","Object","defineProperty","get","internals","stackQueueBase","baseArray","_arr","__array__","add","val","Array","isArray","prototype","push","apply","length","each","callback","i","call","iterate","iterations","Number","is","number","shuffle","not","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","fillArray","len","rv","toArray","hasOwnProperty","slice","unique","path","pathUniqueValues","arr","pathTokens","split","n","TypeError","indexOf","first","condition","last","stack","defaultArray","remove","pop","peek","queue","shift","isString","testVar","isNumber","isDate","toString","assert","assertMessage","t2","t1","empty","test","key","string","boolean","null","defined","object","function","date","prop","getDate","Date","setLastDayOfMonth","dt","setMonth","getMonth","lastDayOfMonth","getTime","setDate","getLastDayOfMonth","getFullYear","addMilliseconds","milliseconds","setMilliseconds","getMilliseconds","addSeconds","seconds","setSeconds","getSeconds","addMinutes","minutes","setMinutes","getMinutes","addHours","hours","setHours","getHours","addDays","days","addMonths","months","addYears","years","setFullYear","getMonths","index","month","name","shortName","once","fn","result","arguments","debounce","wait","timeout","callNow","clearTimeout","setTimeout","execute","executeFn","executer","conditionFn","maxTicks","tick","isNaN","bind","when","conditionFb","_tick","_maxTicks","subscribers","broadcast","to","callArguments","listen","subscribe","cb","deepSealOrFreez","obj","action","check","getOwnPropertyNames","forEach","deepFreeze","freeze","isFrozen","deepSeal","seal","isSealed","extend","objects","unshift","replaceAll","whatToReplace","replaceWith","replace","RegExp","capitalize","toUpperCase","contains","substring","ignoreCase","toLowerCase","chop","step","String","match","clean","trim","truncate","appender","between","str1","str2","index1","index2","substr"],"mappings":"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","file":"sn.min.js","sourcesContent":["/*****************************************************\n\ts.js https://github.com/snovakovic/s.js\n    author: stefan.novakovich@gmail.com\n    version: 0.0.1\n ***************************************************/\n(function(global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n        typeof define === 'function' && define.amd ? define(factory) :\n            (global.sn = factory());\n} (this, (function() {\n\n    'use strict';\n\n    var __EC__; //execution context\n    var __chain__; //return it's self except value\n\n    function sn(executionContext) {\n        __EC__ = executionContext;\n        return sn;\n    }\n\n    /**********************************************\n    * chaining operator allows us to chain methods sn().metod1()._.metod2()\n    ************************************************/\n    Object.defineProperty(sn, '_', {\n        get: function() {\n            __chain__ = true;\n            return sn;\n        }\n    });\n\n\n    /**********************************************\n    * !!!Each public method should use this to return value\n    * _return cleans current context and enables chaining\n    ************************************************/\n    function _return(returnValue) {\n        if (__chain__) {\n            __EC__ = returnValue;\n            __chain__ = false;\n            return sn;\n        }\n\n        __EC__ = undefined;\n        return returnValue;\n    }\n\n\n  //app files will be concatenated here and then this will be closed with sn.end.js\n\n","  return sn;\n})));\n","(function(global) {\n\n    var internals = {\n        stackQueueBase: function(baseArray) {\n            var _arr = this.__array__ = baseArray || [];\n\n            this.add = function(val) {\n                Array.isArray(val)\n                    ? Array.prototype.push.apply(_arr, val)\n                    : _arr.push(val);\n            };\n\n            this.length = function() {\n                return _arr.length;\n            };\n\n            return this;\n\n        }\n    };\n\n    /**********************************************\n    * Loop over array or string. this in callback function will be set to array we are looping over.\n    * @param callback {Function} callback function that will be called on each iteration\n    ************************************************/\n    global.each = function(callback) {\n        if (__EC__ && __EC__.length) {\n            for (var i = 0; i < __EC__.length; i++) {\n                if (callback.call(__EC__, __EC__[i], i) === false) {\n                    break;\n                }\n            }\n        }\n\n        //TODO: IS THIS DESIRED BEHAVIOUR OR NOT??\n        return _return();\n    };\n\n\n    /**********************************************\n    * Iterate specific number of times.\n    * @param l {Number} number of times we want to iterate\n    * @param callback {Function} callback function that will be called on each iteration\n    ************************************************/\n    global.iterate = function(callback) {\n        var iterations = Number(__EC__);\n        if (sn(iterations).is.number()) {\n            for (var i = 0; i < iterations; i++) {\n                if (callback.call(null, i) === false) {\n                    break;\n                }\n            }\n        }\n\n        return _return(sn);\n    };\n\n\n    /*******************************************************\n    * Shuffle values in the array\n    * https://github.com/Daplie/knuth-shuffle\n    * @return {Array} shuffled array\n    ********************************************************/\n    global.shuffle = function() {\n        if (sn(__EC__).not.array()) {\n            return _return();\n        }\n\n        var currentIndex = __EC__.length;\n        var temporaryValue;\n        var randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            temporaryValue = __EC__[currentIndex];\n            __EC__[currentIndex] = __EC__[randomIndex];\n            __EC__[randomIndex] = temporaryValue;\n        }\n\n        return _return(__EC__);\n    };\n\n\n    /*********************************************\n    * Get new array filled with default values\n    * @param val {Any} default array value\n    * @return len {Integer} size of the new array\n    **********************************************/\n    global.fillArray = function(len) {\n        var rv = new Array(len);\n        while (--len >= 0) {\n            rv[len] = __EC__;\n        }\n        return _return(rv);\n    };\n\n    /*********************************************\n    * If array return unmodified array if not array creates array from provided value\n    **********************************************/\n    global.toArray = function() {\n        var returnValue;\n        if (__EC__ == null) {\n            returnValue = [];\n        }\n\n        else if (Array.isArray(__EC__)) {\n            returnValue = __EC__;\n        }\n\n        else {\n            //convert array like object to array or otherwise wrap values with array.\n            returnValue = typeof __EC__ === 'object' && __EC__.hasOwnProperty('length') && typeof __EC__.length === 'number'\n                ? Array.prototype.slice.call(__EC__)\n                : [__EC__];\n        }\n\n        return _return(returnValue);\n    };\n\n\n\n    /*************************************************\n    * Returns new array containing only unique values from original array\n    * Doesn't support nested objects and array\n    * @param path {String} path to object property to compare for uniqueness\n    * @return array without duplicate values\n    ***********************************************/\n    global.unique = function(path) {\n        if (global.is.array()) {\n            var pathUniqueValues = [];\n            var arr = [];\n            for (var i = 0; i < __EC__.length; i++) {\n                if (path) {\n                    var pathTokens = path.split('.');\n                    var val = __EC__[i];\n                    for (var n = 0; n < pathTokens.length; n++) {\n                        val = val[pathTokens[n]];\n                        if (!val) {\n                            throw TypeError('Invalid path. Object property does not exist');\n                        }\n                    }\n\n                    if (pathUniqueValues.indexOf(val) === -1) {\n                        arr.push(__EC__[i]);\n                        pathUniqueValues.push(val);\n                    }\n\n                }\n                else if (arr.indexOf(__EC__[i]) === -1) {\n                    arr.push(__EC__[i]);\n                }\n            }\n\n            return _return(arr);\n        }\n\n        return _return(__EC__);\n    };\n\n\n    /********************************************s\n    * Returns first element of array if no condition is passed,\n    * else if there is condition returns first element of array that meets condition\n    * @param condition {Function} function that returns true if value is found.\n    * @return array item if found or undefined if not found\n    **********************************************/\n    global.first = function(condition) {\n        if (__EC__ && __EC__.length) {\n            if (condition) {\n                for (var i = 0; i < __EC__.length; i++) {\n                    if (condition(__EC__[i])) {\n                        return _return(__EC__[i]);\n                    }\n                }\n            } else {\n                return _return(__EC__[0]);\n            }\n        }\n\n        return _return(undefined);\n\n    };\n\n    /**********************************************************\n    * Returns last element of array if no condition is passed,\n    * else if there is condition returns last element of array that meets condition\n    * @param condition {Function} function that returns true if value is found.\n    * @return array item if found or undefined if not found\n    ***********************************************************/\n    global.last = function(condition) {\n        if (__EC__ && __EC__.length) {\n            if (condition) {\n                for (var i = __EC__.length - 1; i >= 0; i--) {\n                    if (condition(__EC__[i])) {\n                        return _return(__EC__[i]);\n                    }\n                }\n            } else {\n                return _return(__EC__[__EC__.length - 1]);\n            }\n        }\n\n        return _return(undefined);\n\n    };\n\n\n\n    /*********************************************\n     * Stack implementation LIFO last in first out\n     * @param defaultArray [optional] {Array} default array that will be used as a stack base\n    *********************************************/\n    global.stack = function(defaultArray) {\n        var stack = new internals.stackQueueBase(defaultArray);\n        stack.remove = function() {\n            var _arr = this.__array__;\n            return _arr.length ? _arr.pop() : null;\n        };\n        stack.peek = function() {\n            var _arr = this.__array__;\n            return _arr.length ? _arr[_arr.length - 1] : null;\n        };\n\n        return stack;\n    };\n\n\n    /*********************************************\n    * Queue implementation FIFO: first in first out\n    * @param defaultArray [optional] {Array} default array that will be used as a queue base\n    *********************************************/\n    global.queue = function(defaultArray) {\n        var queue = new internals.stackQueueBase(defaultArray);\n        queue.remove = function() {\n            var _arr = this.__array__;\n            return _arr.length ? _arr.shift() : null;\n        };\n        queue.peek = function() {\n            var _arr = this.__array__;\n            return _arr.length ? _arr[0] : null;\n        };\n\n        return queue;\n    };\n\n\n})(sn);\n","(function (global) {\n\n    var internals = {\n        isString: function (testVar) {\n            return typeof testVar === 'string';\n        },\n        isNumber: function (testVar) {\n            //NaN will produce false because NaN !== NaN\n            return typeof testVar === 'number' && testVar === testVar;\n        },\n        isDate: function (testVar) {\n            return Object.prototype.toString.call(testVar) === '[object Date]';\n        },\n        assert: function (val, assertMessage) {\n            if (val) {\n                return val;\n            }\n            throw new TypeError(assertMessage);\n        }\n\n    };\n\n\n\n    /****************************************\n    * Safely check if two variables are the same without JS coercion gotchas\n    * == is used when comparing string and numbers (with exception for emptySting == 0 which is false as it should be)\n    * == is used for compering null and undefined\n    * for everything else === is used.\n    * ********************************* */\n    global.is = function (t2) {\n        var t1 = __EC__;\n        if ((internals.isString(t1) || internals.isNumber(t1)) && (internals.isString(t2) || internals.isNumber(t2))) {\n            //this covers coercion between string and number without any gotchas\n            return (typeof t1 === typeof t2)\n                ? t1 === t2\n                : t1 == t2 && t1 !== '' && t2 !== '';\n\n        } else if (t1 == null && t2 == null) {\n            //This covers when vars are either null or undefined without any gotchas\n            return true;\n        }\n\n        return t1 === t2;\n\n    };\n\n\n    /****************************************************\n     * Test if variable has been defined and is not empty,\n     * Following will be treated as false\n     * sn(null).is.empty(); => true\n     * sn(undefined).is.empty(); => true\n     * sn({}).is.empty(); => true\n     * sn([]).is.empty(); => true\n     * sn(' ').is.empty(); => true\n     * sn('\\n\\t').is.empty(); => true\n    ********************************************************/\n    global.is.empty = function () {\n        if (__EC__ == null\n            || (typeof __EC__ === 'string' && (/^\\s*$/).test(__EC__))) {\n            return true;\n        }\n\n        if (typeof __EC__ === 'object') {\n            for (var key in __EC__) {\n                if (__EC__.hasOwnProperty(key)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        return false;\n    };\n\n\n    /***************************************\n     * START: data type checks\n     **************************************/\n    global.is.string = function () {\n        return internals.isString(__EC__);\n    };\n\n    global.is.number = function () {\n        return internals.isNumber(__EC__);\n    };\n\n    global.is.boolean = function () {\n        return typeof __EC__ === 'boolean';\n    };\n\n    global.is.null = function () {\n        return __EC__ === null;\n    };\n\n    global.is.undefined = function () {\n        return typeof __EC__ === 'undefined';\n    };\n\n    //not null and undefined\n    global.is.defined = function () {\n        return __EC__ != null;\n    };\n\n    global.is.object = function () {\n        return typeof __EC__ === 'object'\n            && __EC__ !== null\n            && !Array.isArray(__EC__);\n    };\n\n    global.is.function = function () {\n        return typeof __EC__ === 'function';\n    };\n\n    global.is.array = function () {\n        return typeof __EC__ === 'object' && Array.isArray(__EC__);\n    };\n\n    global.is.date = function () {\n        return internals.isDate(__EC__);\n    };\n\n    /***************************************\n    * END: data type checks\n    **************************************/\n\n\n    /*************************************\n    * START: ASSERT && NOT MODULE DEFINITION\n    **************************************/\n    global.not = function (val) {\n        return !global.is(val);\n    };\n\n    global.assert = {\n        is: function (val) {\n            return internals.assert(global.is(val), 'Values are not the same.');\n        },\n        not: function (val) {\n            return internals.assert(!global.is(val), 'Values are the same.');\n        }\n    };\n\n    for (var prop in global.is) {\n        if (global.is.hasOwnProperty(prop)) {\n            (function (prop) {\n                global.not[prop] = function () {\n                    return !global.is[prop]();\n                };\n                global.assert.is[prop] = function () {\n                    return internals.assert(global.is[prop](), 'Provided value is not ' + prop + '.');\n                };\n                global.assert.not[prop] = function () {\n                    return internals.assert(!global.is[prop](), 'Provided value is ' + prop + '.');\n                };\n            })(prop);\n        }\n    }\n\n    /*************************************\n    * END: ASSERT MODULE DEFINITION\n    **************************************/\n\n\n})(sn);\n","(function (global) {\n\n    //PRIVATE\n    var getDate = function () {\n        if (__EC__) {\n            global.assert.is.date(__EC__);\n            return __EC__;\n        }\n        return new Date();\n    };\n\n\n\n    //PUBLIC\n\n    /**********************************************\n    * Change provided date so that it point to last day of current month\n    ************************************************/\n    global.setLastDayOfMonth = function () {\n        var dt = getDate();\n        dt.setMonth(dt.getMonth() + 1, 0);\n        return _return(dt);\n    };\n\n\n    /**********************************************\n    * Check if day in date is last day of month\n    * @return true -> day is last day of month; false - day is not last day of month\n    ************************************************/\n    global.is.lastDayOfMonth = function () {\n        var dt = getDate();\n        var test = new Date(dt.getTime());\n        test.setDate(test.getDate() + 1);\n        return _return(test.getDate() === 1);\n    };\n\n\n    /**********************************************\n    * Check if day in date is last day of month\n    * @return true -> day is last day of month; false - day is not last day of month\n    ************************************************/\n    global.getLastDayOfMonth = function () {\n        var dt = getDate();\n        return _return((new Date(dt.getFullYear(), dt.getMonth() + 1, 0)).getDate());\n    };\n\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param milliseconds {Number} +/- milliseconds to add or remove from date\n    ************************************************/\n    global.addMilliseconds = function (milliseconds) {\n        var dt = getDate();\n        dt.setMilliseconds(dt.getMilliseconds() + milliseconds);\n        return _return(dt);\n    };\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param seconds {Number} +/- seconds to add or remove from date\n    ************************************************/\n    global.addSeconds = function (seconds) {\n        var dt = getDate();\n        dt.setSeconds(dt.getSeconds() + seconds);\n        return _return(dt);\n    };\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param minutes {Number} +/- minutes to add or remove from date\n    ************************************************/\n    global.addMinutes = function (minutes) {\n        var dt = getDate();\n        dt.setMinutes(dt.getMinutes() + minutes);\n        return _return(dt);\n    };\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param hours {Number} +/- hours to add or remove from date\n    ************************************************/\n    global.addHours = function (hours) {\n        var dt = getDate();\n        dt.setHours(dt.getHours() + hours);\n        return _return(dt);\n    };\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param days {Number} +/- days to add or remove from date\n    ************************************************/\n    global.addDays = function (days) {\n        var dt = getDate();\n        dt.setDate(dt.getDate() + days);\n        return _return(dt);\n    };\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param months {Number} +/- months to add or remove from date\n    ************************************************/\n    global.addMonths = function (months) {\n        var dt = getDate();\n        dt.setMonth(dt.getMonth() + months);\n        return _return(dt);\n    };\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param years {Number} +/- years to add or remove from date\n    ************************************************/\n    global.addYears = function (years) {\n        var dt = getDate();\n        dt.setFullYear(dt.getFullYear() + years);\n        return _return(dt);\n    };\n\n    /**********************************************\n    * Get the list of english months with fullName, shortName and month index\n    ************************************************/\n    global.getMonths = function () {\n        return _return([\n            {\n                index: 0,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'January',\n                shortName: 'Jan',\n                days: 31\n            }, {\n                index: 1,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'February',\n                shortName: 'Feb',\n                days: [28, 29]\n            }, {\n                index: 2,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'March',\n                shortName: 'Mar',\n                days: 31\n            }, {\n                index: 3,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'April',\n                shortName: 'Apr',\n                days: 30\n            }, {\n                index: 4,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'May',\n                shortName: 'May',\n                days: 31\n            }, {\n                index: 5,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'June',\n                shortName: 'Jun',\n                days: 30\n            }, {\n                index: 6,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'July',\n                shortName: 'Jul',\n                days: 31\n            }, {\n                index: 7,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'August',\n                shortName: 'Aug',\n                days: 31\n            }, {\n                index: 8,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'September',\n                shortName: 'Sep',\n                days: 30\n            }, {\n                index: 9,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'October',\n                shortName: 'Oct',\n                days: 31\n            }, {\n                index: 10,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'November',\n                shortName: 'Nov',\n                days: 30\n            }, {\n                index: 11,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'December',\n                shortName: 'Dec',\n                days: 31\n            }\n        ]);\n    };\n\n})(sn);\n","(function (global) {\n\n\n    /**********************************************\n    * returns function that can be executed only once\n    * Result of function execution is cached and can be accesed latter by calling that function\n    ************************************************/\n    global.once = function (fn) {\n        //TODO: Should this be chainable or not??\n        var result;\n        return function () {\n            if (fn) {\n                result = fn.apply(this, arguments);\n                fn = null;\n            }\n            return result;\n        };\n    };\n\n    /**********************************************\n    * Returns a function, that, as long as it continues to be invoked, will not be triggered\n    * Default wait time for debounce is 200ms.\n     ************************************************/\n    global.debounce = function (fn, wait) {\n        var timeout;\n        return function () {\n            var callNow = !timeout;\n\n            clearTimeout(timeout);\n            timeout = setTimeout(function () {\n                timeout = null;\n            }, wait);\n\n            if (callNow) { fn.apply(this, arguments); }\n        };\n    };\n\n    /*************************\n    * execute function when condition becomes true\n    ************************/\n    global.execute = function (executeFn) {\n        return (function () {\n            var tick;\n            var maxTicks;\n\n            function executer(conditionFn) {\n                if (maxTicks < -tick) {\n                    return;\n                } else if (!isNaN(maxTicks)) {\n                    maxTicks -= tick;\n                }\n\n                conditionFn() ? executeFn() : setTimeout(executer.bind(null, conditionFn), tick);\n            }\n\n            return {\n                when: function (conditionFb, _tick, _maxTicks) {\n                    tick = _tick || 5;\n                    maxTicks = _maxTicks;\n                    executer(conditionFb);\n                }\n\n            };\n        })();\n    };\n\n\n    /*****************************\n     * sMsg - broadcast messages\n     ****************************/\n    var subscribers = {};\n\n    global.broadcast = function (to) {\n        var callArguments = Array.prototype.slice.call(arguments, 1, arguments.length);\n        for (var i = 0; i < subscribers[to].length; i++) {\n            subscribers[to][i].apply(this, callArguments);\n        }\n    };\n\n    global.listen = function (subscribe, cb) {\n        subscribers[subscribe] = subscribers[subscribe] || [];\n        subscribers[subscribe].push(cb);\n    };\n\n\n})(sn);\n","(function(global) {\n\n    var internals = {\n        deepSealOrFreez: function deepSealOrFreez(obj, action, check) {\n            action(obj);\n\n            Object.getOwnPropertyNames(obj).forEach(function(key) {\n                if (obj.hasOwnProperty(key)\n                    && obj[key] !== null\n                    && (typeof obj[key] === 'object' || typeof obj[key] === 'function')\n                    && !check(obj[key])) {\n                    deepSealOrFreez(obj[key], action, check);\n                }\n            });\n\n            return obj;\n        }\n    };\n\n    /**********************************************\n    * Apply Object.freez recursively on object and property of object.\n    * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n    ************************************************/\n    global.deepFreeze = function deepFreez() {\n        return _return(internals.deepSealOrFreez(__EC__, Object.freeze, Object.isFrozen));\n    };\n\n    /**********************************************\n    * Apply Object.seal recursively on object and property of object.\n    * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\n    ************************************************/\n    global.deepSeal = function deepSeal() {\n        return _return(internals.deepSealOrFreez(__EC__, Object.seal, Object.isSealed));\n    };\n\n\n\n    /**********************************************\n    * Extend object with the properties from other provided objects.\n    * In case of same properties names value from first object will be overriden with the value from second object\n    ************************************************/\n    global.extend = function() {\n        var objects = Array.prototype.slice.call(arguments);\n        objects.unshift(__EC__);\n\n        for (var i = 1; i < objects.length; i++) {\n            Object.getOwnPropertyNames(objects[i]).forEach(function(key) {\n                if (objects[i].hasOwnProperty(key)) {\n                    objects[0][key] = objects[i][key];\n                }\n            });\n        }\n\n        return _return(objects[0]);\n    };\n\n})(sn);\n","(function(global) {\n\n    var internals = {\n        isString: function() {\n            for (var i = 0; i < arguments.length; i++) {\n                if (typeof arguments[i] !== 'string') {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n    };\n\n\n    /**************************************************\n    * Remove all occurrences of substring in string\n    * @param whatToReplace {String}\n    * @param replaceWith {String}\n    * @return {String} string with replaced old values with new values\n    **************************************************/\n    global.replaceAll = function(whatToReplace, replaceWith) {\n        return _return(internals.isString(__EC__, whatToReplace, replaceWith)\n            ? __EC__.replace(new RegExp(whatToReplace.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replaceWith)\n            : __EC__);\n    };\n\n\n    /**************************************************\n    * Capitalize string\n    * @return {String} capitalized string\n    **************************************************/\n    global.capitalize = function() {\n        return _return(internals.isString(__EC__)\n            ? __EC__[(0)].toUpperCase() + __EC__.slice(1)\n            : __EC__);\n    };\n\n\n    /**************************************************\n    * test if string contains substring\n    * @param substring {String} substring we want to check for existance\n    * @param ignoreCase {Boolean} if true ignore case when comparing string\n    * @example capitalize('foo Bar', 'oo'); => 'Foo Bar'; capitalize('FOO Bar', true); => 'Foo bar'\n    * https://github.com/epeli/underscore.string\n    **************************************************/\n    global.contains = function(substring, ignoreCase) {\n\n        if (internals.isString(__EC__, substring)) {\n            if (ignoreCase === true) {\n                __EC__ = __EC__.toLowerCase();\n                substring = substring.toLowerCase();\n            }\n\n            return _return(__EC__.indexOf(substring) !== -1);\n        }\n\n        return _return(false);\n\n    };\n\n\n    /**************************************************\n    * Break string in array of substring.\n    * @param step {Number} length of chopped substrings\n    * @example: chop(\"whitespace\", 3); => ['whi', 'tes', 'pac', 'e']\n    * @return {Array} array containing chopped substrings\n    **************************************************/\n    global.chop = function(step) {\n        if (internals.isString(__EC__)) {\n            __EC__ = String(__EC__);\n            step = ~~step;\n            return _return(step > 0\n                ? __EC__.match(new RegExp('.{1,' + step + '}', 'g'))\n                : [__EC__]);\n        }\n\n        return _return([]);\n    };\n\n\n    /**************************************************\n    * Trim and replace multiple spaces with a single space.\n    * @return {String} trimmed and cleaned string\n    **************************************************/\n    global.clean = function() {\n        return _return(internals.isString(__EC__)\n            ? __EC__.trim().replace(/\\s\\s+/g, ' ')\n            : __EC__);\n    };\n\n\n    /**********************************************\n    * Truncate string if it exceed max number of characters,\n    * apply provided truncate string at the end of truncated string (default: '...')\n    * @param length {Number} cut the string after this number of characters\n    * @param appender [optional, default: '...'] {String} string that will be appended to truncated string\n    * @return {String} truncated string\n    **********************************************/\n    global.truncate = function(length, appender) {\n        appender = appender || '...';\n        length = ~~length;\n        return _return((internals.isString(__EC__) && __EC__.length > length)\n            ? __EC__.slice(0, length) + appender\n            : __EC__);\n    };\n\n\n    /**********************************************\n    * Returns part of the string between 2 words.\n    * @param str1 {String}\n    * @param str2 {String}\n    * @return {String} string between startStr and endStr\n    ***********************************************/\n    global.between = function(str1, str2) {\n        var returnValue;\n        if (internals.isString(__EC__, str1, str2)) {\n            var index1 = __EC__.indexOf(str1);\n            var index2 = __EC__.indexOf(str2);\n\n            if (index1 === -1 || index2 === -1) {\n                returnValue = undefined;\n            }\n\n            else if (index2 > index1) {\n                index1 += str1.length;\n                returnValue = __EC__.substr(index1, index2 - index1);\n            }\n\n            else {\n                index2 += str2.length;\n                returnValue = __EC__.substr(index2, index1 - index2);\n            }\n\n        }\n\n        return _return(returnValue);\n\n    };\n\n})(sn);\n"]}