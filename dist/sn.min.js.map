{"version":3,"sources":["sn.js","sn.end.js","sn.array.js","sn.assert.js","sn.date.js","sn.function.js","sn.object.js","sn.string.js"],"names":["global","factory","exports","module","define","amd","sn","this","executionContext","__EC__","each","callback","length","i","call","iterate","iterations","Number","is","number","shuffle","not","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","fillArray","len","rv","Array","toArray","defined","unique","path","pathUniqueValues","arr","pathTokens","split","val","n","TypeError","indexOf","push","first","condition","last","stackQueueBase","baseArray","_arr","__array__","add","isArray","prototype","apply","stack","defaultArray","remove","pop","peek","queue","shift","internals","isString","testVar","isNumber","isDate","Object","toString","assert","assertMessage","t2","t1","empty","test","key","hasOwnProperty","string","boolean","null","undefined","object","function","date","prop","getDate","Date","setLastDayOfMonth","dt","setMonth","getMonth","lastDayOfMonth","getTime","setDate","getLastDayOfMonth","getFullYear","addMilliseconds","milliseconds","setMilliseconds","getMilliseconds","addSeconds","seconds","setSeconds","getSeconds","addMinutes","minutes","setMinutes","getMinutes","addHours","hours","setHours","getHours","addDays","days","addMonths","months","addYears","years","setFullYear","getMonths","index","month","name","shortName","once","fn","result","arguments","debounce","wait","timeout","callNow","clearTimeout","setTimeout","execute","executeFn","executer","conditionFn","maxTicks","tick","isNaN","bind","when","conditionFb","_tick","_maxTicks","subscribers","broadcast","to","callArguments","slice","listen","subscribe","cb","deepSealOrFreez","obj","action","getOwnPropertyNames","forEach","isSealed","deepFreez","freez","deepSeal","seal","extend","replaceAll","whatToReplace","replaceWith","replace","RegExp","capitalize","toUpperCase","contains","substring","ignoreCase","toLowerCase","chop","step","String","match","clean","trim","truncate","appender","between","startStr","endStr","startIndex","endIndex","substr"],"mappings":"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","file":"sn.min.js","sourcesContent":["/*****************************************************\n\t  s.js https://github.com/snovakovic/s.js\n    author: stefan.novakovich@gmail.com\n    version: 0.0.1\n ***************************************************/\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n      (global.sn = factory());\n} (this, (function () {\n\n  'use strict';\n\n  var __EC__; //execution context\n\n  function sn(executionContext) {\n    __EC__ = executionContext;\n    return sn;\n  }\n\n  //app files will be concatenated here and then this will be closed with sn.end.js\n\n","  return sn;\n})));\n","(function (sn) {\n\n\n    /**********************************************\n    * Loop over array or string. this in callback function will be set to array we are looping over.\n    * @param callback {Function} callback function that will be called on each iteration\n    ************************************************/\n    sn.each = function (callback) {\n        if (__EC__ && __EC__.length) {\n            for (var i = 0; i < __EC__.length; i++) {\n                if (callback.call(__EC__, __EC__[i], i) === false) {\n                    break;\n                }\n            }\n        }\n        return sn;\n    };\n\n\n    /**********************************************\n    * Iterate specific number of times.\n    * @param l {Number} number of times we want to iterate\n    * @param callback {Function} callback function that will be called on each iteration\n    ************************************************/\n    sn.iterate = function (callback) {\n        var iterations = Number(__EC__);\n        if (sn(iterations).is.number()) {\n            for (var i = 0; i < iterations; i++) {\n                if (callback.call(null, i) === false) {\n                    break;\n                }\n            }\n        }\n\n        return sn;\n    };\n\n\n    /*******************************************************\n    * Shuffle values in the array\n    * https://github.com/Daplie/knuth-shuffle\n    * @return {Array} shuffled array\n    ********************************************************/\n    sn.shuffle = function () {\n        if (sn(__EC__).not.array()) {\n            return;\n        }\n\n        var currentIndex = __EC__.length;\n        var temporaryValue;\n        var randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            temporaryValue = __EC__[currentIndex];\n            __EC__[currentIndex] = __EC__[randomIndex];\n            __EC__[randomIndex] = temporaryValue;\n        }\n\n        return __EC__;\n    };\n\n\n    /*********************************************\n    * Get new array filled with default values\n    * @param val {Any} default array value\n    * @return len {Integer} size of the new array\n    **********************************************/\n    sn.fillArray = function (len) {\n        var rv = new Array(len);\n        while (--len >= 0) {\n            rv[len] = __EC__;\n        }\n        return rv;\n    };\n\n    /*********************************************\n    * If array return unmodified array if not array creates array from provided value\n    **********************************************/\n    sn.toArray = function () {\n        if (sn.not.defined()) {\n            return [];\n        }\n\n        if (sn.not.array()) {\n            return [__EC__];\n        }\n\n        return __EC__;\n    };\n\n\n\n    /*************************************************\n    * Returns new array containing only unique values from original array\n    * Doesn't support nested objects and array\n    * @param path {String} path to object property to compare for uniqueness\n    * @return array without duplicate values\n    ***********************************************/\n    sn.unique = function (path) {\n        if (sn.is.array()) {\n            var pathUniqueValues = [];\n            var arr = [];\n            for (var i = 0; i < __EC__.length; i++) {\n                if (path) {\n                    var pathTokens = path.split('.');\n                    var val = __EC__[i];\n                    for (var n = 0; n < pathTokens.length; n++) {\n                        val = val[pathTokens[n]];\n                        if (!val) {\n                            throw TypeError('Invalid path. Object property does not exist');\n                        }\n                    }\n\n                    if (pathUniqueValues.indexOf(val) === -1) {\n                        arr.push(__EC__[i]);\n                        pathUniqueValues.push(val);\n                    }\n\n                }\n                else if (arr.indexOf(__EC__[i]) === -1) {\n                    arr.push(__EC__[i]);\n                }\n            }\n            return arr;\n        }\n\n        return __EC__;\n    };\n\n\n    /********************************************s\n    * Returns first element of array if no condition is passed,\n    * else if there is condition returns first element of array that meets condition\n    * @param condition {Function} function that returns true if value is found.\n    * @return array item if found or undefined if not found\n    **********************************************/\n    sn.first = function (condition) {\n        if (__EC__ && __EC__.length) {\n            if (condition) {\n                for (var i = 0; i < __EC__.length; i++) {\n                    if (condition(__EC__[i])) {\n                        return __EC__[i];\n                    }\n                }\n            } else {\n                return __EC__[0];\n            }\n        }\n\n        return undefined;\n\n    };\n\n    /**********************************************************\n    * Returns last element of array if no condition is passed,\n    * else if there is condition returns last element of array that meets condition\n    * @param condition {Function} function that returns true if value is found.\n    * @return array item if found or undefined if not found\n    ***********************************************************/\n    sn.last = function (condition) {\n        if (__EC__ && __EC__.length) {\n            if (condition) {\n                for (var i = __EC__.length - 1; i >= 0; i--) {\n                    if (condition(__EC__[i])) {\n                        return __EC__[i];\n                    }\n                }\n            } else {\n                return __EC__[__EC__.length - 1];\n            }\n        }\n\n        return undefined;\n\n    };\n\n\n    //Stack && Queue implementation\n    (function (sn) {\n\n        var stackQueueBase = function (baseArray) {\n            var _arr = this.__array__ = baseArray || [];\n\n            this.add = function (val) {\n                Array.isArray(val)\n                    ? Array.prototype.push.apply(_arr, val)\n                    : _arr.push(val);\n            };\n\n            this.length = function () {\n                return _arr.length;\n            };\n\n            return this;\n\n        };\n\n\n        /*********************************************\n         * Stack implementation LIFO last in first out\n         * @param defaultArray [optional] {Array} default array that will be used as a stack base\n        *********************************************/\n        sn.stack = function (defaultArray) {\n            var stack = new stackQueueBase(defaultArray);\n            stack.remove = function () {\n                var _arr = this.__array__;\n                return _arr.length ? _arr.pop() : null;\n            };\n            stack.peek = function () {\n                var _arr = this.__array__;\n                return _arr.length ? _arr[_arr.length - 1] : null;\n            };\n\n            return stack;\n        };\n\n\n        /*********************************************\n        * Queue implementation FIFO: first in first out\n        * @param defaultArray [optional] {Array} default array that will be used as a queue base\n        *********************************************/\n        sn.queue = function (defaultArray) {\n            var queue = new stackQueueBase(defaultArray);\n            queue.remove = function () {\n                var _arr = this.__array__;\n                return _arr.length ? _arr.shift() : null;\n            };\n            queue.peek = function () {\n                var _arr = this.__array__;\n                return _arr.length ? _arr[0] : null;\n            };\n\n            return queue;\n        };\n\n    })(sn);\n\n\n})(sn);\n","(function (sn) {\n\n    var internals = {\n        isString: function (testVar) {\n            return typeof testVar === 'string';\n        },\n        isNumber: function (testVar) {\n            //NaN will produce false because NaN !== NaN\n            return typeof testVar === 'number' && testVar === testVar;\n        },\n        isDate: function (testVar) {\n            return Object.prototype.toString.call(testVar) === '[object Date]';\n        },\n        assert: function (val, assertMessage) {\n            if (val) {\n                return val;\n            }\n            throw new TypeError(assertMessage);\n        }\n\n    };\n\n\n\n    /****************************************\n    * Safely check if two variables are the same without JS coercion gotchas\n    * == is used when comparing string and numbers (with exception for emptySting == 0 which is false as it should be)\n    * == is used for compering null and undefined\n    * for everything else === is used.\n    * ********************************* */\n    sn.is = function (t2) {\n        var t1 = __EC__;\n        if ((internals.isString(t1) || internals.isNumber(t1)) && (internals.isString(t2) || internals.isNumber(t2))) {\n            //this covers coercion between string and number without any gotchas\n            return (typeof t1 === typeof t2)\n                ? t1 === t2\n                : t1 == t2 && t1 !== '' && t2 !== '';\n\n        } else if (t1 == null && t2 == null) {\n            //This covers when vars are either null or undefined without any gotchas\n            return true;\n        }\n\n        return t1 === t2;\n\n    };\n\n\n    /****************************************************\n     * Test if variable has been defined and is not empty,\n     * Following will be treated as false\n     * sn(null).is.empty(); => true\n     * sn(undefined).is.empty(); => true\n     * sn({}).is.empty(); => true\n     * sn([]).is.empty(); => true\n     * sn(' ').is.empty(); => true\n     * sn('\\n\\t').is.empty(); => true\n    ********************************************************/\n    sn.is.empty = function () {\n        if (__EC__ == null\n            || (typeof __EC__ === 'string' && (/^\\s*$/).test(__EC__))) {\n            return true;\n        }\n\n        if (typeof __EC__ === 'object') {\n            for (var key in __EC__) {\n                if (__EC__.hasOwnProperty(key)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        return false;\n    };\n\n\n    /***************************************\n     * START: data type checks\n     **************************************/\n    sn.is.string = function () {\n        return internals.isString(__EC__);\n    };\n\n    sn.is.number = function () {\n        return internals.isNumber(__EC__);\n    };\n\n    sn.is.boolean = function () {\n        return typeof __EC__ === 'boolean';\n    };\n\n    sn.is.null = function () {\n        return __EC__ === null;\n    };\n\n    sn.is.undefined = function () {\n        typeof __EC__ === 'undefined';\n    };\n\n    //not null and undefined\n    sn.is.defined = function () {\n        return __EC__ != null;\n    };\n\n    sn.is.object = function () {\n        return typeof __EC__ === 'object'\n            && __EC__ !== null\n            && !Array.isArray(__EC__);\n    };\n\n    sn.is.function = function () {\n        return typeof __EC__ === 'function';\n    };\n\n    sn.is.array = function () {\n        return typeof __EC__ === 'object' && Array.isArray(__EC__);\n    };\n\n    sn.is.date = function () {\n        return internals.isDate(__EC__);\n    };\n\n    /***************************************\n    * END: data type checks\n    **************************************/\n\n\n    /*************************************\n    * START: ASSERT && NOT MODULE DEFINITION\n    **************************************/\n    sn.not = function (val) {\n        return !sn.is(val);\n    };\n\n    sn.assert = {\n        is: function (val) {\n            return internals.assert(sn.is(val), 'Values are not the same.');\n        },\n        not: function (val) {\n            return internals.assert(!sn.is(val), 'Values are the same.');\n        }\n    };\n\n    for (var prop in sn.is) {\n        if (sn.is.hasOwnProperty(prop)) {\n            (function (prop) {\n                sn.not[prop] = function () {\n                    return !sn.is[prop]();\n                };\n                sn.assert.is[prop] = function () {\n                    return internals.assert(sn.is[prop](), 'Provided value is not ' + prop + '.');\n                };\n                sn.assert.not[prop] = function () {\n                    return internals.assert(!sn.is[prop](), 'Provided value is ' + prop + '.');\n                };\n            })(prop);\n        }\n    }\n\n    /*************************************\n    * END: ASSERT MODULE DEFINITION\n    **************************************/\n\n\n})(sn);\n","(function (sn) {\n\n    //PRIVATE\n    var getDate = function () {\n        if (__EC__) {\n            sn.assert.is.date(__EC__);\n            return __EC__;\n        }\n        return new Date();\n    };\n\n\n\n    //PUBLIC\n\n    /**********************************************\n    * Change provided date so that it point to last day of current month\n    ************************************************/\n    sn.setLastDayOfMonth = function () {\n        var dt = getDate();\n        dt.setMonth(dt.getMonth() + 1, 0);\n        return dt;\n    };\n\n\n    /**********************************************\n    * Check if day in date is last day of month\n    * @return true -> day is last day of month; false - day is not last day of month\n    ************************************************/\n    sn.is.lastDayOfMonth = function () {\n        var dt = getDate();\n        var test = new Date(dt.getTime());\n        test.setDate(test.getDate() + 1);\n        return test.getDate() === 1;\n    };\n\n\n    /**********************************************\n    * Check if day in date is last day of month\n    * @return true -> day is last day of month; false - day is not last day of month\n    ************************************************/\n    sn.getLastDayOfMonth = function () {\n        var dt = getDate();\n        return (new Date(dt.getFullYear(), dt.getMonth() + 1, 0)).getDate();\n    };\n\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param milliseconds {Number} +/- milliseconds to add or remove from date\n    ************************************************/\n    sn.addMilliseconds = function (milliseconds) {\n        var dt = getDate();\n        dt.setMilliseconds(dt.getMilliseconds() + milliseconds);\n        return dt;\n    };\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param seconds {Number} +/- seconds to add or remove from date\n    ************************************************/\n    sn.addSeconds = function (seconds) {\n        var dt = getDate();\n        dt.setSeconds(dt.getSeconds() + seconds);\n        return dt;\n    };\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param minutes {Number} +/- minutes to add or remove from date\n    ************************************************/\n    sn.addMinutes = function (minutes) {\n        var dt = getDate();\n        dt.setMinutes(dt.getMinutes() + minutes);\n        return dt;\n    };\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param hours {Number} +/- hours to add or remove from date\n    ************************************************/\n    sn.addHours = function (hours) {\n        var dt = getDate();\n        dt.setHours(dt.getHours() + hours);\n        return dt;\n    };\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param days {Number} +/- days to add or remove from date\n    ************************************************/\n    sn.addDays = function (days) {\n        var dt = getDate();\n        dt.setDate(dt.getDate() + days);\n        return dt;\n    };\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param months {Number} +/- months to add or remove from date\n    ************************************************/\n    sn.addMonths = function (months) {\n        var dt = getDate();\n        dt.setMonth(dt.getMonth() + months);\n        return dt;\n    };\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param years {Number} +/- years to add or remove from date\n    ************************************************/\n    sn.addYears = function (years) {\n        var dt = getDate();\n        dt.setFullYear(dt.getFullYear() + years);\n        return dt;\n    };\n\n    /**********************************************\n    * Get the list of english months with fullName, shortName and month index\n    ************************************************/\n    sn.getMonths = function () {\n        return [\n            {\n                index: 0,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'January',\n                shortName: 'Jan',\n                days: 31\n            }, {\n                index: 1,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'February',\n                shortName: 'Feb',\n                days: [28, 29]\n            }, {\n                index: 2,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'March',\n                shortName: 'Mar',\n                days: 31\n            }, {\n                index: 3,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'April',\n                shortName: 'Apr',\n                days: 30\n            }, {\n                index: 4,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'May',\n                shortName: 'May',\n                days: 31\n            }, {\n                index: 5,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'June',\n                shortName: 'Jun',\n                days: 30\n            }, {\n                index: 6,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'July',\n                shortName: 'Jul',\n                days: 31\n            }, {\n                index: 7,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'August',\n                shortName: 'Aug',\n                days: 31\n            }, {\n                index: 8,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'September',\n                shortName: 'Sep',\n                days: 30\n            }, {\n                index: 9,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'October',\n                shortName: 'Oct',\n                days: 31\n            }, {\n                index: 10,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'November',\n                shortName: 'Nov',\n                days: 30\n            }, {\n                index: 11,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'December',\n                shortName: 'Dec',\n                days: 31\n            }\n        ];\n    };\n\n})(sn);\n","/**********************************************\n* returns function that can be executed only once\n* Result of function execution is cached and can be accesed latter by calling that function\n************************************************/\nsn.once = function (fn) {\n    var result;\n    return function () {\n        if (fn) {\n            result = fn.apply(this, arguments);\n            fn = null;\n        }\n        return result;\n    };\n};\n\n/**********************************************\n* Returns a function, that, as long as it continues to be invoked, will not be triggered\n* Default wait time for debounce is 200ms.\n ************************************************/\nsn.debounce = function (fn, wait) {\n    var timeout;\n    return function () {\n        var callNow = !timeout;\n\n        clearTimeout(timeout);\n        timeout = setTimeout(function () {\n            timeout = null;\n        }, wait);\n\n        if (callNow) { fn.apply(this, arguments); }\n    };\n};\n\n/*************************\n* execute function when condition becomes true\n************************/\nsn.execute = function (executeFn) {\n    return (function () {\n        var tick;\n        var maxTicks;\n\n        function executer(conditionFn) {\n            if (maxTicks < -tick) {\n                return;\n            } else if (!isNaN(maxTicks)) {\n                maxTicks -= tick;\n            }\n\n            conditionFn() ? executeFn() : setTimeout(executer.bind(null, conditionFn), tick);\n        }\n\n        return {\n            when: function (conditionFb, _tick, _maxTicks) {\n                tick = _tick || 5;\n                maxTicks = _maxTicks;\n                executer(conditionFb);\n            }\n\n        };\n    })();\n};\n\n/*****************************\n * sMsg - broadcast messages\n ****************************/\n(function (sn) {\n    var subscribers = {};\n\n    sn.broadcast = function (to) {\n        var callArguments = Array.prototype.slice.call(arguments, 1, arguments.length);\n        for (var i = 0; i < subscribers[to].length; i++) {\n            subscribers[to][i].apply(this, callArguments);\n        }\n    };\n\n    sn.listen = function (subscribe, cb) {\n        subscribers[subscribe] = subscribers[subscribe] || [];\n        subscribers[subscribe].push(cb);\n    };\n\n})(sn);\n","//DeepFreez / DeepSeal\n(function (sn) {\n\n    /**********************************************\n    * Apply Object.freez on object and each children object as deep as it goes.\n    * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n    ************************************************/\n    sn.deepFreez = function deepFreez(obj) {\n        return deepSealOrFreez(obj, Object.freez);\n    };\n\n    /**********************************************\n    * Apply Object.seal on object and each children object as deep as it goes.\n    * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\n    ************************************************/\n    sn.deepSeal = function deepSeal(obj) {\n        return deepSealOrFreez(obj, Object.seal);\n    };\n\n    function deepSealOrFreez(obj, action) {\n        action(obj);\n\n        Object.getOwnPropertyNames(obj).forEach(function (key) {\n            if (obj.hasOwnProperty(key)\n                && obj[key] !== null\n                && (typeof obj[key] === 'object' || typeof obj[key] === 'function')\n                && !Object.isSealed(obj[key])) {\n                deepSealOrFreez(obj[key]);\n            }\n        });\n\n        return obj;\n    }\n\n})(sn);\n\n\n\n/**********************************************\n* Extend object with the properties from other provided objects.\n* In case of same propertie names value from first object will be overriden with the value from second object\n************************************************/\nsn.extend = function () {\n    for (var i = 1; i < arguments.length; i++) {\n        Object.getOwnPropertyNames(arguments[i]).forEach(function (key) {\n            if (arguments[i].hasOwnProperty(key)) {\n                arguments[0][key] = arguments[i][key]\n            }\n        });\n    }\n    return arguments[0];\n};\n","(function (sn) {\n\n    //PUBLIC\n\n\n    /**************************************************\n    * Remove all occurrences of substring in string\n    * @param whatToReplace {String}\n    * @param replaceWith {String}\n    * @return {String} string with replaced old values with new values\n    **************************************************/\n    sn.replaceAll = function (whatToReplace, replaceWith) {\n        return typeof __EC__ === 'string'\n            ? __EC__.replace(new RegExp(whatToReplace.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replaceWith)\n            : __EC__;\n    };\n\n\n    /**************************************************\n    * Capitalize string\n    * @return {String} capitalized string\n    **************************************************/\n    sn.capitalize = function () {\n        return typeof __EC__ === 'string'\n            ? __EC__[(0)].toUpperCase() + __EC__.slice(1)\n            : __EC__;\n    };\n\n\n    /**************************************************\n    * test if string contains substring\n    * @param substring {String} substring we want to check for existance\n    * @param ignoreCase {Boolean} if true ignore case when comparing string\n    * @example capitalize('foo Bar', 'oo'); => 'Foo Bar'; capitalize('FOO Bar', true); => 'Foo bar'\n    * https://github.com/epeli/underscore.string\n    **************************************************/\n    sn.contains = function (substring, ignoreCase) {\n        if (ignoreCase === true) {\n            __EC__ = __EC__.toLowerCase();\n            substring = substring.toLowerCase();\n        }\n\n        return __EC__.indexOf(substring) !== -1;\n    };\n\n\n    /**************************************************\n    * Break string in array of substring.\n    * @param step {Number} length of chopped substrings\n    * @example: chop(\"whitespace\", 3); => ['whi', 'tes', 'pac', 'e']\n    * @return {Array} array containing chopped substrings\n    **************************************************/\n    sn.chop = function (step) {\n        if (!__EC__) { return []; }\n        __EC__ = String(__EC__);\n        step = ~~step;\n        return step > 0 ? __EC__.match(new RegExp('.{1,' + step + '}', 'g')) : [__EC__];\n    };\n\n\n    /**************************************************\n    * Trim and replace multiple spaces with a single space.\n    * @return {String} trimmed and cleaned string\n    **************************************************/\n    sn.clean = function () {\n        return __EC__.trim().replace(/\\s\\s+/g, ' ');\n    };\n\n\n    /**********************************************\n    * Truncate string if it exceed max number of characters,\n    * apply provided truncate string at the end of truncated string (default: '...')\n    * @param length {Number} cut the string after this number of characters\n    * @param appender [optional, default: '...'] {String} string that will be appended to truncated string\n    * @return {String} truncated string\n    **********************************************/\n    sn.truncate = function (length, appender) {\n        appender = appender || '...';\n        appender = ~~appender;\n        return __EC__.length > length ? __EC__.slice(0, length) + appender : __EC__;\n    };\n\n\n    /**********************************************\n    * get part of the string between 2 words.\n    * @param startStr {String}\n    * @param endStr {String}\n    * @return {String} string between startStr and endStr\n    ***********************************************/\n    sn.between = function (startStr, endStr) {\n        var startIndex = __EC__.indexOf(startStr);\n        var endIndex = __EC__.indexOf(endStr);\n\n        if (startIndex === -1 || startIndex === -1) {\n            return undefined;\n        }\n\n        startIndex += startStr.length;\n        return __EC__.substr(startIndex, endIndex - startIndex);\n    };\n\n})(sn);\n"]}