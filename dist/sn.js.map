{"version":3,"sources":["sn.js","sn.array.js","sn.assert.js","sn.date.js","sn.function.js","sn.object.js","sn.string.js","sn.end.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtltrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxlIA;AACA;AACA","file":"sn.js","sourcesContent":["/*****************************************************\n\t  s.js https://github.com/snovakovic/s.js\n    author: stefan.novakovich@gmail.com\n    version: 0.0.1\n ***************************************************/\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n      (global.sn = factory());\n} (this, (function () {\n\n  'use strict';\n\n  var __EC__; //execution context\n\n  function sn(executionContext) {\n    __EC__ = executionContext;\n    return sn;\n  }\n\n  //app files will be concatenated here and then this will be closed with sn.end.js\n\n","(function (global) {\n\n    var internals = {\n        stackQueueBase: function (baseArray) {\n            var _arr = this.__array__ = baseArray || [];\n\n            this.add = function (val) {\n                Array.isArray(val)\n                    ? Array.prototype.push.apply(_arr, val)\n                    : _arr.push(val);\n            };\n\n            this.length = function () {\n                return _arr.length;\n            };\n\n            return this;\n\n        }\n    };\n\n    /**********************************************\n    * Loop over array or string. this in callback function will be set to array we are looping over.\n    * @param callback {Function} callback function that will be called on each iteration\n    ************************************************/\n    global.each = function (callback) {\n        if (__EC__ && __EC__.length) {\n            for (var i = 0; i < __EC__.length; i++) {\n                if (callback.call(__EC__, __EC__[i], i) === false) {\n                    break;\n                }\n            }\n        }\n        return sn;\n    };\n\n\n    /**********************************************\n    * Iterate specific number of times.\n    * @param l {Number} number of times we want to iterate\n    * @param callback {Function} callback function that will be called on each iteration\n    ************************************************/\n    global.iterate = function (callback) {\n        var iterations = Number(__EC__);\n        if (sn(iterations).is.number()) {\n            for (var i = 0; i < iterations; i++) {\n                if (callback.call(null, i) === false) {\n                    break;\n                }\n            }\n        }\n\n        return sn;\n    };\n\n\n    /*******************************************************\n    * Shuffle values in the array\n    * https://github.com/Daplie/knuth-shuffle\n    * @return {Array} shuffled array\n    ********************************************************/\n    global.shuffle = function () {\n        if (sn(__EC__).not.array()) {\n            return;\n        }\n\n        var currentIndex = __EC__.length;\n        var temporaryValue;\n        var randomIndex;\n\n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            temporaryValue = __EC__[currentIndex];\n            __EC__[currentIndex] = __EC__[randomIndex];\n            __EC__[randomIndex] = temporaryValue;\n        }\n\n        return __EC__;\n    };\n\n\n    /*********************************************\n    * Get new array filled with default values\n    * @param val {Any} default array value\n    * @return len {Integer} size of the new array\n    **********************************************/\n    global.fillArray = function (len) {\n        var rv = new Array(len);\n        while (--len >= 0) {\n            rv[len] = __EC__;\n        }\n        return rv;\n    };\n\n    /*********************************************\n    * If array return unmodified array if not array creates array from provided value\n    **********************************************/\n    global.toArray = function () {\n        if (__EC__ == null) {\n            return [];\n        }\n\n        if (Array.isArray(__EC__)) {\n            return __EC__;\n        }\n\n        //convert array like object to array or otherwise wrap values with array.\n        return typeof __EC__ === 'object' && __EC__.hasOwnProperty('length') && typeof __EC__.length === 'number'\n            ? Array.prototype.slice.call(__EC__)\n            : [__EC__];\n    };\n\n\n\n    /*************************************************\n    * Returns new array containing only unique values from original array\n    * Doesn't support nested objects and array\n    * @param path {String} path to object property to compare for uniqueness\n    * @return array without duplicate values\n    ***********************************************/\n    global.unique = function (path) {\n        if (global.is.array()) {\n            var pathUniqueValues = [];\n            var arr = [];\n            for (var i = 0; i < __EC__.length; i++) {\n                if (path) {\n                    var pathTokens = path.split('.');\n                    var val = __EC__[i];\n                    for (var n = 0; n < pathTokens.length; n++) {\n                        val = val[pathTokens[n]];\n                        if (!val) {\n                            throw TypeError('Invalid path. Object property does not exist');\n                        }\n                    }\n\n                    if (pathUniqueValues.indexOf(val) === -1) {\n                        arr.push(__EC__[i]);\n                        pathUniqueValues.push(val);\n                    }\n\n                }\n                else if (arr.indexOf(__EC__[i]) === -1) {\n                    arr.push(__EC__[i]);\n                }\n            }\n            return arr;\n        }\n\n        return __EC__;\n    };\n\n\n    /********************************************s\n    * Returns first element of array if no condition is passed,\n    * else if there is condition returns first element of array that meets condition\n    * @param condition {Function} function that returns true if value is found.\n    * @return array item if found or undefined if not found\n    **********************************************/\n    global.first = function (condition) {\n        if (__EC__ && __EC__.length) {\n            if (condition) {\n                for (var i = 0; i < __EC__.length; i++) {\n                    if (condition(__EC__[i])) {\n                        return __EC__[i];\n                    }\n                }\n            } else {\n                return __EC__[0];\n            }\n        }\n\n        return undefined;\n\n    };\n\n    /**********************************************************\n    * Returns last element of array if no condition is passed,\n    * else if there is condition returns last element of array that meets condition\n    * @param condition {Function} function that returns true if value is found.\n    * @return array item if found or undefined if not found\n    ***********************************************************/\n    global.last = function (condition) {\n        if (__EC__ && __EC__.length) {\n            if (condition) {\n                for (var i = __EC__.length - 1; i >= 0; i--) {\n                    if (condition(__EC__[i])) {\n                        return __EC__[i];\n                    }\n                }\n            } else {\n                return __EC__[__EC__.length - 1];\n            }\n        }\n\n        return undefined;\n\n    };\n\n\n\n    /*********************************************\n     * Stack implementation LIFO last in first out\n     * @param defaultArray [optional] {Array} default array that will be used as a stack base\n    *********************************************/\n    global.stack = function (defaultArray) {\n        var stack = new internals.stackQueueBase(defaultArray);\n        stack.remove = function () {\n            var _arr = this.__array__;\n            return _arr.length ? _arr.pop() : null;\n        };\n        stack.peek = function () {\n            var _arr = this.__array__;\n            return _arr.length ? _arr[_arr.length - 1] : null;\n        };\n\n        return stack;\n    };\n\n\n    /*********************************************\n    * Queue implementation FIFO: first in first out\n    * @param defaultArray [optional] {Array} default array that will be used as a queue base\n    *********************************************/\n    global.queue = function (defaultArray) {\n        var queue = new internals.stackQueueBase(defaultArray);\n        queue.remove = function () {\n            var _arr = this.__array__;\n            return _arr.length ? _arr.shift() : null;\n        };\n        queue.peek = function () {\n            var _arr = this.__array__;\n            return _arr.length ? _arr[0] : null;\n        };\n\n        return queue;\n    };\n\n\n})(sn);\n","(function (global) {\n\n    var internals = {\n        isString: function (testVar) {\n            return typeof testVar === 'string';\n        },\n        isNumber: function (testVar) {\n            //NaN will produce false because NaN !== NaN\n            return typeof testVar === 'number' && testVar === testVar;\n        },\n        isDate: function (testVar) {\n            return Object.prototype.toString.call(testVar) === '[object Date]';\n        },\n        assert: function (val, assertMessage) {\n            if (val) {\n                return val;\n            }\n            throw new TypeError(assertMessage);\n        }\n\n    };\n\n\n\n    /****************************************\n    * Safely check if two variables are the same without JS coercion gotchas\n    * == is used when comparing string and numbers (with exception for emptySting == 0 which is false as it should be)\n    * == is used for compering null and undefined\n    * for everything else === is used.\n    * ********************************* */\n    global.is = function (t2) {\n        var t1 = __EC__;\n        if ((internals.isString(t1) || internals.isNumber(t1)) && (internals.isString(t2) || internals.isNumber(t2))) {\n            //this covers coercion between string and number without any gotchas\n            return (typeof t1 === typeof t2)\n                ? t1 === t2\n                : t1 == t2 && t1 !== '' && t2 !== '';\n\n        } else if (t1 == null && t2 == null) {\n            //This covers when vars are either null or undefined without any gotchas\n            return true;\n        }\n\n        return t1 === t2;\n\n    };\n\n\n    /****************************************************\n     * Test if variable has been defined and is not empty,\n     * Following will be treated as false\n     * sn(null).is.empty(); => true\n     * sn(undefined).is.empty(); => true\n     * sn({}).is.empty(); => true\n     * sn([]).is.empty(); => true\n     * sn(' ').is.empty(); => true\n     * sn('\\n\\t').is.empty(); => true\n    ********************************************************/\n    global.is.empty = function () {\n        if (__EC__ == null\n            || (typeof __EC__ === 'string' && (/^\\s*$/).test(__EC__))) {\n            return true;\n        }\n\n        if (typeof __EC__ === 'object') {\n            for (var key in __EC__) {\n                if (__EC__.hasOwnProperty(key)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        return false;\n    };\n\n\n    /***************************************\n     * START: data type checks\n     **************************************/\n    global.is.string = function () {\n        return internals.isString(__EC__);\n    };\n\n    global.is.number = function () {\n        return internals.isNumber(__EC__);\n    };\n\n    global.is.boolean = function () {\n        return typeof __EC__ === 'boolean';\n    };\n\n    global.is.null = function () {\n        return __EC__ === null;\n    };\n\n    global.is.undefined = function () {\n        return typeof __EC__ === 'undefined';\n    };\n\n    //not null and undefined\n    global.is.defined = function () {\n        return __EC__ != null;\n    };\n\n    global.is.object = function () {\n        return typeof __EC__ === 'object'\n            && __EC__ !== null\n            && !Array.isArray(__EC__);\n    };\n\n    global.is.function = function () {\n        return typeof __EC__ === 'function';\n    };\n\n    global.is.array = function () {\n        return typeof __EC__ === 'object' && Array.isArray(__EC__);\n    };\n\n    global.is.date = function () {\n        return internals.isDate(__EC__);\n    };\n\n    /***************************************\n    * END: data type checks\n    **************************************/\n\n\n    /*************************************\n    * START: ASSERT && NOT MODULE DEFINITION\n    **************************************/\n    global.not = function (val) {\n        return !global.is(val);\n    };\n\n    global.assert = {\n        is: function (val) {\n            return internals.assert(global.is(val), 'Values are not the same.');\n        },\n        not: function (val) {\n            return internals.assert(!global.is(val), 'Values are the same.');\n        }\n    };\n\n    for (var prop in global.is) {\n        if (global.is.hasOwnProperty(prop)) {\n            (function (prop) {\n                global.not[prop] = function () {\n                    return !global.is[prop]();\n                };\n                global.assert.is[prop] = function () {\n                    return internals.assert(global.is[prop](), 'Provided value is not ' + prop + '.');\n                };\n                global.assert.not[prop] = function () {\n                    return internals.assert(!global.is[prop](), 'Provided value is ' + prop + '.');\n                };\n            })(prop);\n        }\n    }\n\n    /*************************************\n    * END: ASSERT MODULE DEFINITION\n    **************************************/\n\n\n})(sn);\n","(function (global) {\n\n    //PRIVATE\n    var getDate = function () {\n        if (__EC__) {\n            global.assert.is.date(__EC__);\n            return __EC__;\n        }\n        return new Date();\n    };\n\n\n\n    //PUBLIC\n\n    /**********************************************\n    * Change provided date so that it point to last day of current month\n    ************************************************/\n    global.setLastDayOfMonth = function () {\n        var dt = getDate();\n        dt.setMonth(dt.getMonth() + 1, 0);\n        return dt;\n    };\n\n\n    /**********************************************\n    * Check if day in date is last day of month\n    * @return true -> day is last day of month; false - day is not last day of month\n    ************************************************/\n    global.is.lastDayOfMonth = function () {\n        var dt = getDate();\n        var test = new Date(dt.getTime());\n        test.setDate(test.getDate() + 1);\n        return test.getDate() === 1;\n    };\n\n\n    /**********************************************\n    * Check if day in date is last day of month\n    * @return true -> day is last day of month; false - day is not last day of month\n    ************************************************/\n    global.getLastDayOfMonth = function () {\n        var dt = getDate();\n        return (new Date(dt.getFullYear(), dt.getMonth() + 1, 0)).getDate();\n    };\n\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param milliseconds {Number} +/- milliseconds to add or remove from date\n    ************************************************/\n    global.addMilliseconds = function (milliseconds) {\n        var dt = getDate();\n        dt.setMilliseconds(dt.getMilliseconds() + milliseconds);\n        return dt;\n    };\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param seconds {Number} +/- seconds to add or remove from date\n    ************************************************/\n    global.addSeconds = function (seconds) {\n        var dt = getDate();\n        dt.setSeconds(dt.getSeconds() + seconds);\n        return dt;\n    };\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param minutes {Number} +/- minutes to add or remove from date\n    ************************************************/\n    global.addMinutes = function (minutes) {\n        var dt = getDate();\n        dt.setMinutes(dt.getMinutes() + minutes);\n        return dt;\n    };\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param hours {Number} +/- hours to add or remove from date\n    ************************************************/\n    global.addHours = function (hours) {\n        var dt = getDate();\n        dt.setHours(dt.getHours() + hours);\n        return dt;\n    };\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param days {Number} +/- days to add or remove from date\n    ************************************************/\n    global.addDays = function (days) {\n        var dt = getDate();\n        dt.setDate(dt.getDate() + days);\n        return dt;\n    };\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param months {Number} +/- months to add or remove from date\n    ************************************************/\n    global.addMonths = function (months) {\n        var dt = getDate();\n        dt.setMonth(dt.getMonth() + months);\n        return dt;\n    };\n\n    /**********************************************\n    * Add or remove dates from provided date\n    * @param years {Number} +/- years to add or remove from date\n    ************************************************/\n    global.addYears = function (years) {\n        var dt = getDate();\n        dt.setFullYear(dt.getFullYear() + years);\n        return dt;\n    };\n\n    /**********************************************\n    * Get the list of english months with fullName, shortName and month index\n    ************************************************/\n    global.getMonths = function () {\n        return [\n            {\n                index: 0,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'January',\n                shortName: 'Jan',\n                days: 31\n            }, {\n                index: 1,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'February',\n                shortName: 'Feb',\n                days: [28, 29]\n            }, {\n                index: 2,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'March',\n                shortName: 'Mar',\n                days: 31\n            }, {\n                index: 3,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'April',\n                shortName: 'Apr',\n                days: 30\n            }, {\n                index: 4,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'May',\n                shortName: 'May',\n                days: 31\n            }, {\n                index: 5,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'June',\n                shortName: 'Jun',\n                days: 30\n            }, {\n                index: 6,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'July',\n                shortName: 'Jul',\n                days: 31\n            }, {\n                index: 7,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'August',\n                shortName: 'Aug',\n                days: 31\n            }, {\n                index: 8,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'September',\n                shortName: 'Sep',\n                days: 30\n            }, {\n                index: 9,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'October',\n                shortName: 'Oct',\n                days: 31\n            }, {\n                index: 10,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'November',\n                shortName: 'Nov',\n                days: 30\n            }, {\n                index: 11,\n                get month() {\n                    return this.index + 1;\n                },\n                name: 'December',\n                shortName: 'Dec',\n                days: 31\n            }\n        ];\n    };\n\n})(sn);\n","(function (global) {\n\n\n    /**********************************************\n    * returns function that can be executed only once\n    * Result of function execution is cached and can be accesed latter by calling that function\n    ************************************************/\n    global.once = function (fn) {\n        var result;\n        return function () {\n            if (fn) {\n                result = fn.apply(this, arguments);\n                fn = null;\n            }\n            return result;\n        };\n    };\n\n    /**********************************************\n    * Returns a function, that, as long as it continues to be invoked, will not be triggered\n    * Default wait time for debounce is 200ms.\n     ************************************************/\n    global.debounce = function (fn, wait) {\n        var timeout;\n        return function () {\n            var callNow = !timeout;\n\n            clearTimeout(timeout);\n            timeout = setTimeout(function () {\n                timeout = null;\n            }, wait);\n\n            if (callNow) { fn.apply(this, arguments); }\n        };\n    };\n\n    /*************************\n    * execute function when condition becomes true\n    ************************/\n    global.execute = function (executeFn) {\n        return (function () {\n            var tick;\n            var maxTicks;\n\n            function executer(conditionFn) {\n                if (maxTicks < -tick) {\n                    return;\n                } else if (!isNaN(maxTicks)) {\n                    maxTicks -= tick;\n                }\n\n                conditionFn() ? executeFn() : setTimeout(executer.bind(null, conditionFn), tick);\n            }\n\n            return {\n                when: function (conditionFb, _tick, _maxTicks) {\n                    tick = _tick || 5;\n                    maxTicks = _maxTicks;\n                    executer(conditionFb);\n                }\n\n            };\n        })();\n    };\n\n\n    /*****************************\n     * sMsg - broadcast messages\n     ****************************/\n    var subscribers = {};\n\n    global.broadcast = function (to) {\n        var callArguments = Array.prototype.slice.call(arguments, 1, arguments.length);\n        for (var i = 0; i < subscribers[to].length; i++) {\n            subscribers[to][i].apply(this, callArguments);\n        }\n    };\n\n    global.listen = function (subscribe, cb) {\n        subscribers[subscribe] = subscribers[subscribe] || [];\n        subscribers[subscribe].push(cb);\n    };\n\n\n})(sn);\n","(function (global) {\n\n    var internals = {\n        deepSealOrFreez: function deepSealOrFreez(obj, action, check) {\n            action(obj);\n\n            Object.getOwnPropertyNames(obj).forEach(function (key) {\n                if (obj.hasOwnProperty(key)\n                    && obj[key] !== null\n                    && (typeof obj[key] === 'object' || typeof obj[key] === 'function')\n                    && !check(obj[key])) {\n                    deepSealOrFreez(obj[key], action, check);\n                }\n            });\n\n            return obj;\n        }\n    };\n\n    /**********************************************\n    * Apply Object.freez recursively on object and property of object.\n    * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n    ************************************************/\n    global.deepFreeze = function deepFreez() {\n        return internals.deepSealOrFreez(__EC__, Object.freeze, Object.isFrozen);\n    };\n\n    /**********************************************\n    * Apply Object.seal recursively on object and property of object.\n    * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\n    ************************************************/\n    global.deepSeal = function deepSeal() {\n        return internals.deepSealOrFreez(__EC__, Object.seal, Object.isSealed);\n    };\n\n\n\n    /**********************************************\n    * Extend object with the properties from other provided objects.\n    * In case of same properties names value from first object will be overriden with the value from second object\n    ************************************************/\n    global.extend = function () {\n        var objects = Array.prototype.slice.call(arguments);\n        objects.unshift(__EC__);\n\n        for (var i = 1; i < objects.length; i++) {\n            Object.getOwnPropertyNames(objects[i]).forEach(function (key) {\n                if (objects[i].hasOwnProperty(key)) {\n                    objects[0][key] = objects[i][key];\n                }\n            });\n        }\n        return objects[0];\n    };\n\n})(sn);\n","(function (global) {\n\n    function isString() {\n        for (var i = 0; i < arguments.length; i++) {\n            if (typeof arguments[i] !== 'string') {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**************************************************\n    * Remove all occurrences of substring in string\n    * @param whatToReplace {String}\n    * @param replaceWith {String}\n    * @return {String} string with replaced old values with new values\n    **************************************************/\n    global.replaceAll = function (whatToReplace, replaceWith) {\n        return isString(__EC__, whatToReplace, replaceWith)\n            ? __EC__.replace(new RegExp(whatToReplace.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&'), 'g'), replaceWith)\n            : __EC__;\n    };\n\n\n    /**************************************************\n    * Capitalize string\n    * @return {String} capitalized string\n    **************************************************/\n    global.capitalize = function () {\n        return isString(__EC__)\n            ? __EC__[(0)].toUpperCase() + __EC__.slice(1)\n            : __EC__;\n    };\n\n\n    /**************************************************\n    * test if string contains substring\n    * @param substring {String} substring we want to check for existance\n    * @param ignoreCase {Boolean} if true ignore case when comparing string\n    * @example capitalize('foo Bar', 'oo'); => 'Foo Bar'; capitalize('FOO Bar', true); => 'Foo bar'\n    * https://github.com/epeli/underscore.string\n    **************************************************/\n    global.contains = function (substring, ignoreCase) {\n\n        if (isString(__EC__, substring)) {\n            if (ignoreCase === true) {\n                __EC__ = __EC__.toLowerCase();\n                substring = substring.toLowerCase();\n            }\n\n            return __EC__.indexOf(substring) !== -1;\n        }\n\n        return false;\n\n    };\n\n\n    /**************************************************\n    * Break string in array of substring.\n    * @param step {Number} length of chopped substrings\n    * @example: chop(\"whitespace\", 3); => ['whi', 'tes', 'pac', 'e']\n    * @return {Array} array containing chopped substrings\n    **************************************************/\n    global.chop = function (step) {\n        if (isString(__EC__)) {\n            __EC__ = String(__EC__);\n            step = ~~step;\n            return step > 0 ? __EC__.match(new RegExp('.{1,' + step + '}', 'g')) : [__EC__];\n        }\n\n        return [];\n    };\n\n\n    /**************************************************\n    * Trim and replace multiple spaces with a single space.\n    * @return {String} trimmed and cleaned string\n    **************************************************/\n    global.clean = function () {\n        return isString(__EC__)\n            ? __EC__.trim().replace(/\\s\\s+/g, ' ')\n            : __EC__;\n    };\n\n\n    /**********************************************\n    * Truncate string if it exceed max number of characters,\n    * apply provided truncate string at the end of truncated string (default: '...')\n    * @param length {Number} cut the string after this number of characters\n    * @param appender [optional, default: '...'] {String} string that will be appended to truncated string\n    * @return {String} truncated string\n    **********************************************/\n    global.truncate = function (length, appender) {\n        appender = appender || '...';\n        length = ~~length;\n        return (isString(__EC__) && __EC__.length > length)\n            ? __EC__.slice(0, length) + appender\n            : __EC__;\n    };\n\n\n    /**********************************************\n    * Returns part of the string between 2 words.\n    * @param str1 {String}\n    * @param str2 {String}\n    * @return {String} string between startStr and endStr\n    ***********************************************/\n    global.between = function (str1, str2) {\n        if (isString(__EC__, str1, str2)) {\n            var index1 = __EC__.indexOf(str1);\n            var index2 = __EC__.indexOf(str2);\n\n            if (index1 === -1 || index2 === -1) {\n                return undefined;\n            }\n\n            if (index2 > index1) {\n                index1 += str1.length;\n                return __EC__.substr(index1, index2 - index1);\n            } else {\n                index2 += str2.length;\n                return __EC__.substr(index2, index1 - index2);\n            }\n        }\n\n    };\n\n})(sn);\n","  return sn;\n})));\n"]}